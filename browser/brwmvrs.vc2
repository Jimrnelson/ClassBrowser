*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="brwmvrs.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS mover AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />

	#INCLUDE "brwmvrs.h"
	*<DefinedPropArrayMethod>
		*m: getselections
		*m: initchoices
		*m: initselections
		*m: poplist
		*m: sizetocontainer
		*m: validitem
		*p: oldlselecteditem
		*p: oldrselecteditem
		*p: sortleft
		*p: updated
		*p: usearrays
		*a: achoices[1,0]
		*a: aselections[1,0]
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 108
	Name = "mover"
	sortleft = .F.
	TabIndex = 1
	updated = .F.
	usearrays = .T.
	Width = 377

	ADD OBJECT 'cmdAdd' AS commandbutton WITH ;
		Caption = "Add >", ;
		Height = 20, ;
		Left = 160, ;
		Name = "cmdAdd", ;
		TabIndex = 2, ;
		Top = 33, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS commandbutton WITH ;
		Caption = "< Remove", ;
		Enabled = .F., ;
		Height = 20, ;
		Left = 160, ;
		Name = "cmdRemove", ;
		TabIndex = 3, ;
		Top = 58, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 15, ;
		Left = 0, ;
		Name = "Label1", ;
		Top = 0, ;
		Width = 124
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		BackStyle = 0, ;
		Caption = "", ;
		Height = 15, ;
		Left = 251, ;
		Name = "Label2", ;
		Top = 0, ;
		Width = 124
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lstLeft' AS listbox WITH ;
		Height = 92, ;
		Left = 0, ;
		Name = "lstLeft", ;
		Sorted = .T., ;
		TabIndex = 1, ;
		Top = 15, ;
		Width = 143
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'lstRight' AS listbox WITH ;
		Enabled = .F., ;
		Height = 92, ;
		Left = 256, ;
		MoverBars = .T., ;
		Name = "lstRight", ;
		TabIndex = 4, ;
		Top = 15, ;
		Width = 121
		*< END OBJECT: BaseClass="listbox" />
	
	PROCEDURE getselections
		parameters aSelections
		private i
		if this.lstRight.ListCount > 0
			dimension aSelections[this.lstRight.ListCount,1]
			for m.i = 1 to alen(aSelections,1)
				aSelections[m.i,1] = this.lstRight.List[m.i]
			endfor
		endif
		return this.lstRight.ListCount
		
	ENDPROC

	PROCEDURE Init
		DIMENSION THIS.aSelections[1,2]
		DIMENSION THIS.aChoices[1]
	ENDPROC

	PROCEDURE initchoices
		lparameters aChoices
		
		LOCAL lSorted
		lSorted = IIF(TYPE("this.sortleft")="L",this.sortleft,.T.)
		
		IF THIS.UseArrays	&&using arrays
			DIMENSION THIS.aChoices[1,1]
			=ACOPY(aChoices,THIS.aChoices)
			IF m.lSorted
				=ASORT(THIS.aChoices)
			ENDIF
			this.lstLeft.rowsourcetype = 5						&&array
			this.lstLeft.rowsource = "THIS.Parent.aChoices"		&&array
		ELSE
			this.lstLeft.sorted = .F.
			THIS.POPLIST(@aChoices,this.lstLeft)
			IF m.lSorted
				this.lstLeft.sorted = .T.
			ENDIF
		ENDIF
		
		this.lstLeft.ListItemID = this.lstLeft.IndexToItemID[1]
		this.Refresh()
	ENDPROC

	PROCEDURE initselections
		LPARAMETERS aSelections
		LOCAL i
		THIS.POPLIST(@aSelections,this.lstRight)
		this.lstRight.ListItemID = this.lstLeft.IndexToItemID[1]
		
		DIMENSION this.aSelections[ALEN(aSelections),2]
		FOR i = 1 TO ALEN(aSelections)
			this.aSelections[m.i,1] = aSelections[m.i]
			this.aSelections[m.i,2] = m.i
		ENDFOR
		THIS.Refresh()
	ENDPROC

	PROCEDURE poplist
		* this routine is used to expedite the process of
		* populating a Listbox using the AddItem method
		* for RowSourceType = 0.
		LPARAMETER aListArray,oLstRef
		EXTERNAL ARRAY aListArray
		
		private cTmpListStr,i
		m.cTmpListStr = ""
		
		for m.i=1 to alen(aListArray,1)
			m.oLstRef.AddItem(aListArray[m.i,1])
		endfor
		
	ENDPROC

	PROCEDURE Refresh
		if type("this.oldLSelectedItem")='L'
			this.oldLSelectedItem=0
		endif
		if type("this.oldRSelectedItem")='L'
			this.oldRSelectedItem=0
		endif
		
		if this.lstLeft.ListCount = 0
			this.lstLeft.Enabled = .f.
			this.cmdAdd.Enabled = .f.
		else
			this.lstLeft.Enabled = .t.
			this.cmdAdd.Enabled = .t.
			if this.oldLSelectedItem>0
				this.lstLeft.ListIndex=this.oldLSelectedItem
				if this.lstLeft.ListIndex=0
					this.lstLeft.ListIndex=this.oldLSelectedItem-1
					if this.lstLeft.ListIndex=0
						this.lstLeft.ListIndex=1
					endif
				endif
			endif
		endif
		
		if this.lstRight.ListCount = 0
			this.lstRight.Enabled = .f.
			this.cmdRemove.Enabled = .f.
		else
			this.lstRight.Enabled = .t.
			this.cmdRemove.Enabled = .t.
			if this.oldRSelectedItem>0
				this.lstRight.ListIndex=this.oldRSelectedItem
				if this.lstRight.ListIndex=0
					this.lstRight.ListIndex=this.oldRSelectedItem-1
					if this.lstRight.ListIndex=0
						this.lstRight.ListIndex=1
					endif
				endif
			endif
		endif
		this.oldLSelectedItem=0
		this.oldRSelectedItem=0
		
		
		
	ENDPROC

	PROCEDURE sizetocontainer
		private m.iScaleMode
		m.iScaleMode = thisform.ScaleMode
		thisform.ScaleMode = 3 && Pixels
		
		if empty(this.Label1.Caption)
			this.Label1.Height = 0
		endif
		this.Label2.Height = this.Label1.Height
		this.Label1.Top = 0
		this.Label2.Top = 0
		
		this.lstLeft.Top = this.Label1.Height
		this.lstRight.Top = this.lstLeft.Top
		this.lstLeft.Height = this.Height - this.Label1.Height
		this.lstRight.Height = this.lstLeft.Height
		this.lstLeft.Width = int((this.Width - this.cmdAdd.Width - 36) / 2)
		this.lstRight.Width = this.lstLeft.Width
		this.lstLeft.Left = 0
		this.lstRight.Left = this.Width - this.lstRight.Width
		this.Label2.Left = this.lstRight.Left
		
		this.Label1.Width = this.lstLeft.Width
		this.Label2.Width = this.Label1.Width
		
		this.cmdAdd.Left = int((this.Width - this.cmdAdd.Width) / 2)
		this.cmdRemove.Left = this.cmdAdd.Left
		this.cmdRemove.Height = this.cmdAdd.Height
		this.cmdRemove.Width = this.cmdAdd.Width
		this.cmdAdd.Top = this.Label1.Height + ;
			int((this.lstLeft.Height - ((this.cmdAdd.Height * 2) + 6)) / 2)
		this.cmdRemove.Top = this.cmdAdd.Top + this.cmdAdd.Height + 6
		
		thisform.ScaleMode = m.iScaleMode
		
	ENDPROC

	PROCEDURE validitem
		* Stub here, but is used by TBLMOVER under certain conditions
		* to prevent item from being added back to left list. For example,
		* where the item is a field which is not part of the current table.
		
		RETURN .T.
	ENDPROC

	PROCEDURE cmdAdd.Click
		LOCAL cLstIdx
		IF EMPTY(this.Parent.lstLeft.value) OR this.Parent.lstLeft.Listindex = 0
			RETURN
		ENDIF
		
		this.Parent.Updated = .t.
		IF	!this.Parent.lstRight.enabled 		&&prevents refresh problem
			this.Parent.lstRight.enabled = .T.
		ENDIF
		
		cLstIdx = this.Parent.lstLeft.ListIndex
		
		* Add item to Selections listbox
		this.Parent.lstRight.AddItem(this.Parent.lstLeft.List[m.cLstIdx])
		
		* Add Item to aSelections array
		IF !EMPTY(this.parent.aSelections[1])
			DIMENSION this.parent.aSelections[ALEN(this.parent.aSelections,1)+1,2]
		ENDIF
		this.parent.aSelections[ALEN(this.parent.aSelections,1),1] = this.Parent.lstLeft.List[m.cLstIdx]
		this.parent.aSelections[ALEN(this.parent.aSelections,1),2] = ;
			this.Parent.lstRight.IndexToItemID[this.Parent.lstRight.ListCount]
		
		* Set hilited item to last item in list
		this.Parent.lstRight.ListItemID = ;
			this.Parent.lstRight.IndexToItemID[this.Parent.lstRight.ListCount]
		this.parent.oldLSelectedItem = m.cLstIdx
		
		
		* Remove item from Choices listbox
		IF THIS.Parent.UseArrays	&&using arrays
			IF ALEN(this.parent.aChoices)=1
				this.Parent.lstLeft.clear()
			ELSE
				=ADEL(this.parent.aChoices,m.cLstIdx)
				DIMENSION this.parent.aChoices[ALEN(this.parent.aChoices)-1]
				this.Parent.lstLeft.rowsource = "this.parent.aChoices"
			ENDIF
		ELSE
			this.Parent.lstLeft.RemoveItem(m.cLstIdx)
		ENDIF
		
		this.Parent.Refresh()
		
	ENDPROC

	PROCEDURE cmdRemove.Click
		PARAMETER nPosition
		
		LOCAL cLstIdx,nLstPos
		cLstIdx = this.Parent.lstRight.ListIndex
		
		nLstPos = IIF(PARAMETERS()#0 AND TYPE("m.nPosition")="N",nPosition,0)
		
		IF EMPTY(this.Parent.lstRight.value) OR this.Parent.lstRight.listindex = 0
			RETURN
		ENDIF
		
		this.Parent.Updated = .t.
		IF !this.Parent.lstLeft.enabled
			this.Parent.lstLeft.enabled = .T.
		ENDIF
		
		* Add item to left list
		IF THIS.Parent.ValidItem()		&& but allows one to bypass adding item back
		  IF THIS.Parent.UseArrays	&&using array
			IF !EMPTY(this.parent.aChoices)
				DIMENSION this.parent.aChoices[ALEN(this.parent.aChoices)+1]
			ENDIF
			this.parent.aChoices[ALEN(this.parent.aChoices)] = this.Parent.lstRight.List[m.cLstIdx]
			IF this.parent.lstLeft.sorted
				=ASORT(this.parent.aChoices)
			ENDIF
			this.Parent.lstLeft.rowsourcetype = 5
			this.Parent.lstLeft.rowsource = "this.parent.aChoices"
		  ELSE
		    IF nLstPos = 0
				this.Parent.lstLeft.AddListItem(this.Parent.lstRight.List[m.cLstIdx])
				this.Parent.lstLeft.ListItemID = ;
				this.Parent.lstLeft.IndexToItemID[this.Parent.lstLeft.ListCount]
			ELSE
				this.Parent.lstLeft.AddItem(this.Parent.lstRight.List[m.cLstIdx],m.nLstPos)
				this.Parent.lstLeft.ListItemID = ;
				this.Parent.lstLeft.IndexToItemID[1]
			ENDIF
		  ENDIF
		  this.Parent.lstLeft.Value = this.Parent.lstRight.List[m.cLstIdx]
		ENDIF
		
		* Reset selections array
		IF ALEN(this.parent.aSelections,1) = 1
			this.parent.aSelections[1,1] = ""
		ELSE
			* We must find the right one
			nPos = ASCAN(this.parent.aSelections,this.Parent.lstRight.ListItemId)
			IF m.nPos # 0
				nPos = ASUBSCRIPT(this.parent.aSelections,m.nPos,1)
			ELSE
				nPos = this.Parent.lstRight.ListItemId
			ENDIF
			=ADEL(this.parent.aSelections,m.nPos)
			DIMENSION this.parent.aSelections[ALEN(this.parent.aSelections,1)-1,2]
		ENDIF
		
		* Remove item from list on right
		this.parent.oldRSelectedItem = this.Parent.lstRight.ListIndex
		this.Parent.lstRight.RemoveItem(m.cLstIdx)
		
		this.Parent.Refresh
		
	ENDPROC

	PROCEDURE lstLeft.Clear
		DIMENSION this.parent.aChoices[1]
		this.parent.aChoices[1] = ""
		this.rowsourcetype = 0
		this.value = ""
	ENDPROC

	PROCEDURE lstLeft.DblClick
		this.Parent.cmdAdd.Click
		
	ENDPROC

	PROCEDURE lstLeft.Init
		this.value=""
	ENDPROC

	PROCEDURE lstLeft.InteractiveChange
		IF EMPTY(THIS.VALUE)
			THIS.VALUE = THIS.LIST[1]
		ENDIF
	ENDPROC

	PROCEDURE lstRight.Clear
		DIMENSION this.parent.aSelections[1,2]
		this.parent.aSelections[1] = ""
		
	ENDPROC

	PROCEDURE lstRight.DblClick
		this.Parent.cmdRemove.Click
		
	ENDPROC

	PROCEDURE lstRight.Init
		this.value=""
	ENDPROC

	PROCEDURE lstRight.InteractiveChange
		IF EMPTY(THIS.VALUE)
			THIS.VALUE = THIS.LIST[1]
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS supermover AS mover OF "brwmvrs.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdAddAll" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemoveAll" UniqueID="" Timestamp="" />

	#INCLUDE "brwmvrs.h"
	*<DefinedPropArrayMethod>
		*p: maxitems
		*p: maxmessage
	*</DefinedPropArrayMethod>

	Height = 108
	maxitems = 0
	maxmessage = ("")
	Name = "supermover"
	Width = 371
	lstleft.Left = 0
	lstleft.Name = "lstleft"
	lstleft.TabIndex = 2
	lstleft.Top = 15
	cmdadd.Caption = ""
	cmdadd.Height = 21
	cmdadd.Left = 179
	cmdadd.Name = "cmdadd"
	cmdadd.Picture = _add.bmp
	cmdadd.TabIndex = 3
	cmdadd.Top = 16
	cmdadd.Width = 23
	cmdremove.Caption = ""
	cmdremove.Height = 21
	cmdremove.Left = 179
	cmdremove.Name = "cmdremove"
	cmdremove.Picture = _remove.bmp
	cmdremove.TabIndex = 5
	cmdremove.Top = 63
	cmdremove.Width = 23
	lstright.Left = 251
	lstright.Name = "lstright"
	lstright.TabIndex = 8
	lstright.Top = 15
	label1.Left = 0
	label1.Name = "label1"
	label1.TabIndex = 1
	label1.Top = 0
	label2.Left = 251
	label2.Name = "label2"
	label2.TabIndex = 7
	label2.Top = 0

	ADD OBJECT 'cmdAddAll' AS commandbutton WITH ;
		Caption = "", ;
		Height = 21, ;
		Left = 179, ;
		Name = "cmdAddAll", ;
		Picture = _addall.bmp, ;
		TabIndex = 4, ;
		Top = 38, ;
		Width = 23
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemoveAll' AS commandbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 21, ;
		Left = 179, ;
		Name = "cmdRemoveAll", ;
		Picture = _remall.bmp, ;
		TabIndex = 6, ;
		Top = 85, ;
		Width = 23
		*< END OBJECT: BaseClass="commandbutton" />
	
	PROCEDURE Init
		#DEFINE C_MAXREC1_LOC	"You cannot select more than "
		#DEFINE C_MAXREC2_LOC	" items."
		
		IF TYPE("THIS.MaxItems")#"N" OR THIS.MaxItems<0
			THIS.MaxItems=0
		ENDIF
		IF TYPE("THIS.MaxMessage")#"C" OR EMPTY(THIS.MaxMessage)
			THIS.MaxMessage = C_MAXREC1_LOC+ALLTRIM(STR(THIS.MaxItems))+C_MAXREC2_LOC
		ENDIF
		
		DODEFAULT()
	ENDPROC

	PROCEDURE Refresh
		DODEFAULT()
		if this.lstLeft.ListCount = 0
			this.cmdAddAll.Enabled = .f.
			this.cmdAddAll.default = .f.
		else
			this.cmdAddAll.Enabled = .t.
		endif
		
		if this.lstRight.ListCount = 0
			this.cmdRemoveAll.Enabled = .f.
			this.cmdRemoveAll.default = .f.
		else
			this.cmdRemoveAll.Enabled = .t.
		endif
	ENDPROC

	PROCEDURE sizetocontainer
		private iScaleMode
		
		m.iScaleMode = thisform.ScaleMode
		thisform.ScaleMode = 3 && Pixels
		
		* If the labels are unused, set the Height to 0
		if empty(this.Label1.Caption)
			this.Label1.Height = 0
		endif
		this.Label2.Height = this.Label1.Height
		this.Label1.Top = 0
		this.Label2.Top = 0
		
		this.lstLeft.Top = this.Label1.Height
		this.lstRight.Top = this.lstLeft.Top
		this.lstLeft.Height = this.Height - this.Label1.Height
		this.lstRight.Height = this.lstLeft.Height
		this.lstLeft.Width = int((this.Width - this.cmdAdd.Width - 36) / 2)
		this.lstRight.Width = this.lstLeft.Width
		this.lstLeft.Left = 0
		this.lstRight.Left = this.Width - this.lstRight.Width
		this.Label2.Left = this.lstRight.Left
		
		this.Label1.Width = this.lstLeft.Width
		this.Label2.Width = this.Label1.Width
		
		this.cmdAdd.Left = int((this.Width - this.cmdAdd.Width) / 2)
		this.cmdAddAll.Left = this.cmdAdd.Left
		this.cmdRemove.Left = this.cmdAdd.Left
		this.cmdRemoveAll.Left = this.cmdAdd.Left
		
		this.cmdAddAll.Height = this.cmdAdd.Height
		this.cmdRemove.Height = this.cmdAdd.Height
		this.cmdRemoveAll.Height = this.cmdAdd.Height
		this.cmdAddAll.Width = this.cmdAdd.Width
		this.cmdRemove.Width = this.cmdAdd.Width
		this.cmdRemoveAll.Width = this.cmdAdd.Width
		
		
		this.cmdAdd.Top = this.Label1.Height + ;
			int((this.lstLeft.Height - ((this.cmdAdd.Height * 4) + 3)) / 2)
		this.cmdAddAll.Top = this.cmdAdd.Top + this.cmdAdd.Height + 1
		this.cmdRemove.Top = this.cmdAddAll.Top + this.cmdAddAll.Height + 1
		this.cmdRemoveAll.Top = this.cmdRemove.Top + this.cmdRemove.Height + 1
		
		thisform.ScaleMode = m.iScaleMode
		
		
		
	ENDPROC

	PROCEDURE cmdadd.Click
		* Check for maxitems
		IF this.Parent.MaxItems>0 AND;
		 (THIS.Parent.lstRight.ListCount+1)>this.Parent.MaxItems
			IF !EMPTY(THIS.Parent.MaxMessage) AND TYPE("THIS.Parent.MaxMessage")="C"
				MESSAGEBOX(THIS.Parent.MaxMessage)
			ENDIF
			RETURN
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE cmdAddAll.Click
		LOCAL aListItems,lSorted,nTmpLen,nTmpLen2,cValue,i
		IF this.Parent.lstLeft.ListCount = 0
			RETURN
		ENDIF
		
		* Check for maxitems
		IF this.Parent.MaxItems>0 AND;
		 (THIS.Parent.lstLeft.ListCount+THIS.Parent.lstRight.ListCount) > this.Parent.MaxItems
			IF !EMPTY(THIS.Parent.MaxMessage) AND TYPE("THIS.Parent.MaxMessage")="C"
				MESSAGEBOX(THIS.Parent.MaxMessage)
			ENDIF
			RETURN
		ENDIF
		
		THISFORM.LOCKSCREEN = .T.
		
		lSorted = this.Parent.lstRight.Sorted
		this.Parent.lstRight.Sorted = .F.
		cValue = this.Parent.lstLeft.Value
		
		IF THIS.Parent.UseArrays
			DIMENSION aListItems[ALEN(THIS.Parent.aChoices,1),1]
			=ACOPY(THIS.Parent.aChoices,aListItems)
		ELSE
			DIMENSION aListItems[this.Parent.lstLeft.ListCount,1]
			FOR m.i = 1 to this.Parent.lstLeft.ListCount
				aListItems[m.i,1] = this.Parent.lstLeft.List[m.i]
			ENDFOR
		ENDIF
		
		this.Parent.lstLeft.clear()
		THIS.Parent.POPLIST(@aListItems,this.Parent.lstRight)
		this.Parent.Updated = .t.
		
		* Test for valid setting
		IF this.Parent.lstRight.listitemid = 0
			this.Parent.lstRight.listitemid = 1
		ENDIF
		
		IF this.Parent.lstRight.ListCount = 0 OR EMPTY(THIS.Parent.aSelections[1])
			DIMENSION THIS.Parent.aSelections[ALEN(aListItems,1),2]
			FOR i = 1 TO ALEN(aListItems,1)
				THIS.Parent.aSelections[m.i,1] = aListItems[m.i]
				THIS.Parent.aSelections[m.i,2] = m.i	&& this assumes that Sorted is set off
			ENDFOR
		ELSE
			nTmpLen = ALEN(THIS.Parent.aSelections,1)+1
			nTmpLen2 = ALEN(THIS.Parent.aSelections,1) + ALEN(aListItems,1)
		
			DIMENSION THIS.Parent.aSelections[m.nTmpLen2,2]
			FOR i = m.nTmpLen TO m.nTmpLen2
				THIS.Parent.aSelections[m.i,1] = aListItems[m.i+1-m.nTmpLen]
				THIS.Parent.aSelections[m.i,2] = THIS.Parent.LstRight.IndexToItemId(m.i)
			ENDFOR
		ENDIF
		
		IF m.lSorted
			this.Parent.lstRight.Sorted = .T.
		ENDIF
		
		this.Parent.lstRight.Value = m.cValue
		
		this.Parent.Refresh
		THISFORM.LOCKSCREEN = .F.
		
	ENDPROC

	PROCEDURE cmdRemoveAll.Click
		LOCAL aListItems,lSorted,nArrLen,cValue,i
		IF this.Parent.lstRight.ListCount = 0
			RETURN
		ENDIF
		THISFORM.LOCKSCREEN = .T.
		lSorted = this.Parent.lstLeft.Sorted
		cValue = this.Parent.lstRight.Value
		
		DIMENSION aListItems[this.Parent.lstRight.ListCount,1]
		for m.i = 1 to this.Parent.lstRight.ListCount
			aListItems[m.i,1] = this.Parent.lstRight.List[m.i]
		endfor
		
		IF This.Parent.UseArrays
			IF this.Parent.lstLeft.ListCount = 0
				DIMENSION THIS.Parent.aChoices[1]
				=ACOPY(aListItems,THIS.Parent.aChoices)
			ELSE
				nArrLen = ALEN(THIS.Parent.aChoices,1)+1
				DIMENSION THIS.Parent.aChoices[ALEN(THIS.Parent.aChoices,1)+ALEN(aListItems,1)]
				=ACOPY(aListItems,THIS.Parent.aChoices,1,-1,m.nArrLen)
			ENDIF
			IF m.lSorted
				=ASORT(THIS.Parent.aChoices)
			ENDIF
			this.Parent.lstLeft.RowSourceType = 5
			this.Parent.lstLeft.RowSource = "THIS.Parent.aChoices"
		ELSE
			this.Parent.lstLeft.Sorted = .F.			&& performance is better with Sorted off
			this.Parent.POPLIST(@aListItems,this.Parent.lstLeft)
			IF m.lSorted
				this.Parent.lstLeft.Sorted = .T.
			ENDIF
		ENDIF
		
		this.Parent.lstRight.Clear
		this.Parent.Updated = .t.
		this.parent.lstleft.value = m.cValue
		
		* Test for valid setting
		IF this.Parent.lstleft.listitemid = 0
			this.Parent.lstleft.listitemid = 1
		ENDIF
		
		
		this.Parent.Refresh
		THISFORM.LOCKSCREEN = .F.
		
	ENDPROC

ENDDEFINE
