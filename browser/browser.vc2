*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="browser.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _cgclipboard AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: clear		&& Clears the contents of a ComboBox or ListBox control.
		*m: ldragdropmode_assign
		*m: release		&& Releases a FormSet or Form from memory.
		*m: releaseobjects
		*p: chostname
		*p: clasthostname
		*p: lcut
		*p: ldragdropmode
		*p: llastcut
		*p: odroptarget
		*p: oitem
		*p: olastitem
	*</DefinedPropArrayMethod>

	PROTECTED clasthostname,llastcut,olastitem
	chostname = 
	clasthostname = 
	Name = "_cgclipboard"
	odroptarget = .NULL.
	oitem = .NULL.
	olastitem = .NULL.
	
	PROCEDURE clear		&& Clears the contents of a ComboBox or ListBox control.
		LPARAMETERS tcHostName
		LOCAL lcHostName
		
		lcHostName=IIF(TYPE("tcHostName")=="C",LOWER(ALLTRIM(this.cHostName)),"")
		IF NOT EMPTY(lcHostName) AND NOT EMPTY(this.cHostName) AND ;
				NOT LOWER(ALLTRIM(lcHostName))==LOWER(ALLTRIM(tcHostName))
			RETURN .F.
		ENDIF
		this.oDropTarget=.NULL.
		this.oItem=.NULL.
		this.cHostName=""
		this.lCut=.F.
		
	ENDPROC

	PROCEDURE Destroy
		this.ReleaseObjects
		
	ENDPROC

	PROCEDURE ldragdropmode_assign
		LPARAMETERS m.vNewVal
		
		IF this.lDragDropMode=m.vNewVal
			RETURN
		ENDIF
		WITH this
			.oDropTarget=.NULL.
			IF m.vNewVal
				.oLastItem=.oItem
				.cLastHostName=.cHostName
				.lLastCut=.lCut
				.oItem=.NULL.
				.lCut=.F.
			ELSE
				.oItem=.oLastItem
				.cHostName=.cLastHostName
				.lCut=.lLastCut
				.oLastItem=.NULL.
				.cLastHostName=""
				.lLastCut=.F.
			ENDIF
			.lDragDropMode=m.vNewVal
		ENDWITH
		
	ENDPROC

	PROCEDURE release		&& Releases a FormSet or Form from memory.
		this.ReleaseObjects
		RELEASE this
		
	ENDPROC

	PROCEDURE releaseobjects
		this.oDropTarget=.NULL.
		this.oLastItem=.NULL.
		this.oItem=.NULL.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _parentclassbrowser AS superclasstoolbar OF "supercls.vcx" 
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdEditMethod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oEditMethodShortcutMenu" UniqueID="" Timestamp="" />

	#INCLUDE "browser.h"
	*<DefinedPropArrayMethod>
		*p: nlangopt
	*</DefinedPropArrayMethod>

	Caption = ""
	DataSession = 2
	Height = 28
	Left = 0
	ltimer = .F.
	Name = "_parentclassbrowser"
	nlangopt = 0
	Top = 0
	Width = 57

	ADD OBJECT 'cmdEditMethod' AS superclasseditmethod WITH ;
		Caption = "", ;
		csuperclasstext = ParentClass, ;
		Left = 5, ;
		Name = "cmdEditMethod", ;
		Picture = pclsbrw.bmp, ;
		SpecialEffect = 2, ;
		Top = 3, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="supercls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'oEditMethodShortcutMenu' AS editmethodshortcutmenu WITH ;
		Left = 28, ;
		Name = "oEditMethodShortcutMenu", ;
		Top = 3
		*< END OBJECT: ClassLib="supercls.vcx" BaseClass="custom" />
	
	PROCEDURE Activate
		THIS.nlangopt = _VFP.LanguageOptions
		IF THIS.nlangopt = 1
			_VFP.LanguageOptions = 0
		ENDIF
		
	ENDPROC

	PROCEDURE Deactivate
		IF THIS.nlangopt = 1
			_VFP.LanguageOptions = 1
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		SET TALK OFF
		SET CONFIRM ON
		SET EXACT OFF
		SET EXCLUSIVE OFF
		SET MEMOWIDTH TO 1024
		SET MULTILOCKS ON
		SET PALETTE OFF
		SET POINT TO "."
		SET SAFETY OFF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _releasebrowsertimer AS timer 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 23
	Interval = 1
	Name = "_releasebrowsertimer"
	Width = 23
	
	PROCEDURE Timer
		thisform.Release
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _runcodetimer AS timer 
 	*< CLASSDATA: Baseclass="timer" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: runcode
		*p: ccode
		*p: lautodisable
	*</DefinedPropArrayMethod>

	ccode = 
	Enabled = .F.
	Height = 23
	Interval = 100
	lautodisable = .T.
	Name = "_runcodetimer"
	Width = 23
	
	PROCEDURE Destroy
		this.Enabled=.F.
		
	ENDPROC

	PROCEDURE runcode
		LPARAMETERS tcCode
		
		this.Enabled=.F.
		IF VARTYPE(tcCode)=="C" AND NOT EMPTY(tcCode)
			this.cCode=tcCode
		ENDIF
		IF VARTYPE(this.cCode)#"C" OR EMPTY(this.cCode)
			RETURN .F.
		ENDIF
		this.Enabled=.T.
		
	ENDPROC

	PROCEDURE Timer
		IF this.lAutoDisable
			this.Enabled=.F.
		ENDIF
		IF EMPTY(this.cCode)
			RETURN
		ENDIF
		thisform.RunCode(this.cCode)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS advancedcommentproperties AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblComments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtComments" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtuser" UniqueID="" Timestamp="" />

	#INCLUDE "browser.h"
	BackStyle = 0
	BorderWidth = 0
	Height = 230
	Name = "advancedcommentproperties"
	Width = 457

	ADD OBJECT 'edtComments' AS buildereditbox WITH ;
		AllowTabs = .T., ;
		cproperty = cComment, ;
		Height = 112, ;
		IntegralHeight = .F., ;
		lallowenter = .T., ;
		Left = 62, ;
		Name = "edtComments", ;
		nmaxlength = 0, ;
		StatusBarText = "Comments", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 395
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtuser' AS buildereditbox WITH ;
		AllowTabs = .T., ;
		cproperty = cUser, ;
		Height = 112, ;
		IntegralHeight = .F., ;
		lallowenter = .T., ;
		Left = 62, ;
		Name = "edtuser", ;
		nmaxlength = 0, ;
		StatusBarText = "User information", ;
		TabIndex = 4, ;
		Top = 116, ;
		Width = 395
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblComments' AS builderlabel WITH ;
		Caption = "Comments:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblComments", ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 54
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'lblUser' AS builderlabel WITH ;
		Caption = "User:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblUser", ;
		TabIndex = 3, ;
		Top = 116, ;
		Width = 27
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

ENDDEFINE

DEFINE CLASS advanceditemtypeproperties AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstItemTypes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblItemType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClassLib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFileTypes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClassLib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFileTypes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRedirect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtRedirect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClassLib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboItemType" UniqueID="" Timestamp="" />

	#INCLUDE "browser.h"
	BackStyle = 0
	BorderWidth = 0
	Height = 230
	Name = "advanceditemtypeproperties"
	Width = 457

	ADD OBJECT 'cboItemType' AS buildercombobox WITH ;
		cproperty = oHost.oEdit.oRecord.TypeDesc, ;
		cvalidexpression = UPPER(ALLTRIM(Value))=="ITEM" OR UPPER(ALLTRIM(Value))=="FOLDER", ;
		Format = "K", ;
		Height = 24, ;
		InputMask = "AAAAAAAAAAAA", ;
		Left = 388, ;
		lupdateonchange = .F., ;
		Name = "cboItemType", ;
		RowSource = "ITEM,FOLDER", ;
		RowSourceType = 1, ;
		TabIndex = 14, ;
		Top = 90, ;
		Width = 70
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdAdd' AS commandbutton WITH ;
		Caption = "\<Add", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 0, ;
		Name = "cmdAdd", ;
		StatusBarText = "Add new item", ;
		TabIndex = 2, ;
		Top = 86, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdClassLib' AS getfilebutton WITH ;
		cclassproperty = oHost.oEdit.oRecord.ClassName, ;
		cgetfileext = vcx, ;
		cobjname = parent.txtClassLib, ;
		cproperty = oHost.oEdit.oRecord.ClassLib, ;
		Left = 435, ;
		lfullpath = .F., ;
		Name = "cmdClassLib", ;
		TabIndex = 10, ;
		Top = 61
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS commandbutton WITH ;
		Caption = "\<Remove", ;
		Enabled = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 81, ;
		Name = "cmdRemove", ;
		StatusBarText = "Remove selected item", ;
		TabIndex = 3, ;
		Top = 86, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'edtProperties' AS buildereditbox WITH ;
		AllowTabs = .T., ;
		cproperty = oHost.oEdit.oRecord.Properties, ;
		FontName = "Courier New", ;
		Height = 50, ;
		IntegralHeight = .F., ;
		lallowenter = .T., ;
		Left = 55, ;
		Name = "edtProperties", ;
		nmaxlength = 0, ;
		TabIndex = 16, ;
		Top = 125, ;
		Width = 402
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtRedirect' AS buildereditbox WITH ;
		AllowTabs = .T., ;
		cproperty = oHost.oEdit.oRecord.ItemTpDesc, ;
		FontName = "Courier New", ;
		Height = 50, ;
		IntegralHeight = .F., ;
		lallowenter = .T., ;
		Left = 55, ;
		Name = "edtRedirect", ;
		nmaxlength = 0, ;
		TabIndex = 18, ;
		Top = 180, ;
		Width = 402
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblClass' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Class:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 165, ;
		Name = "lblClass", ;
		TabIndex = 6, ;
		Top = 34, ;
		Width = 30
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblClassLib' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Class library:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 165, ;
		Name = "lblClassLib", ;
		TabIndex = 8, ;
		Top = 64, ;
		Width = 60
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblFileTypes' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "File types:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 165, ;
		Name = "lblFileTypes", ;
		TabIndex = 11, ;
		Top = 94, ;
		Width = 49
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblItemType' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Item type:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 330, ;
		Name = "lblItemType", ;
		TabIndex = 13, ;
		Top = 95, ;
		Width = 48
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblProperties' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Properties:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblProperties", ;
		TabIndex = 15, ;
		Top = 125, ;
		Width = 52
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblRedirect' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Redirect:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblRedirect", ;
		TabIndex = 17, ;
		Top = 180, ;
		Width = 45
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblText' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Text:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 165, ;
		Name = "lblText", ;
		TabIndex = 4, ;
		Top = 4, ;
		Width = 26
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lstItemTypes' AS listbox WITH ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 80, ;
		IntegralHeight = .T., ;
		Left = 0, ;
		Name = "lstItemTypes", ;
		Sorted = .T., ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 156
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'txtClass' AS buildertextbox WITH ;
		cproperty = oHost.oEdit.oRecord.ClassName, ;
		Height = 24, ;
		Left = 235, ;
		lupdateonchange = .F., ;
		Name = "txtClass", ;
		TabIndex = 7, ;
		Top = 30, ;
		Width = 195
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtClassLib' AS buildertextbox WITH ;
		cproperty = oHost.oEdit.oRecord.ClassLib, ;
		Height = 24, ;
		Left = 235, ;
		lupdateonchange = .F., ;
		Name = "txtClassLib", ;
		TabIndex = 9, ;
		Top = 60, ;
		Width = 195
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtFileTypes' AS buildertextbox WITH ;
		cproperty = oHost.oEdit.oRecord.Views, ;
		Height = 24, ;
		Left = 235, ;
		lupdateonchange = .F., ;
		Name = "txtFileTypes", ;
		TabIndex = 12, ;
		Top = 90, ;
		Width = 85
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtText' AS buildertextbox WITH ;
		cproperty = oHost.oEdit.oRecord.Text, ;
		cvalidexpression = NOT EMPTY(Value), ;
		Height = 24, ;
		Left = 235, ;
		lupdateonchange = .F., ;
		Name = "txtText", ;
		TabIndex = 5, ;
		Top = 0, ;
		Width = 195
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />
	
	PROCEDURE cboItemType.Valid
		LOCAL lcValue
		
		lcValue=UPPER(ALLTRIM(this.Value))
		IF NOT ALLTRIM(this.Value)==lcValue
			this.Value=lcValue
		ENDIF
		IF NOT DODEFAULT()
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		LOCAL lcText,lnCount,lcCount,lnCount2,llMatch
		
		thisform.oObject.oHost.oEdit=thisform.oNullCatalogRecord.NewRecord()
		IF ISNULL(thisform.oObject.oHost.oEdit) OR ISNULL(thisform.oObject.oHost.oEdit.oRecord)
			RETURN
		ENDIF
		thisform.lObjectUpdated=.T.
		lnCount=0
		DO WHILE .T.
			lnCount=lnCount+1
			lcCount=ALLTRIM(STR(lnCount))
			lcText="Item Type "+lcCount
			llMatch=.F.
			FOR lnCount2 = 1 TO thisform.nItemTypeCount
				IF LOWER(thisform.aItemTypes[lnCount2].oRecord.Text)==LOWER(lcText)
					llMatch=.T.
					EXIT
				ENDIF
			ENDFOR
			IF NOT llMatch
				EXIT
			ENDIF
		ENDDO
		WITH thisform.oObject.oHost.oEdit
			WITH .oRecord
				.Type="CLASS"
				.ID=LOWER(SYS(2015))
				.Text=lcText
				.TypeDesc="ITEM"
			ENDWITH
			.Commit
		ENDWITH
		thisform.RefreshItemTypes(this.parent.lstItemTypes)
		IF this.parent.lstItemTypes.ListCount=0
			this.parent.lstItemTypes.ListIndex=0
		ELSE
			this.parent.lstItemTypes.Value=lcText
		ENDIF
		this.parent.txtText.SetFocus
		
	ENDPROC

	PROCEDURE cmdClassLib.Refresh
		this.Enabled=(this.parent.lstItemTypes.ListIndex>=1)
		
	ENDPROC

	PROCEDURE cmdRemove.Click
		IF thisform.oHost.MsgBox([Are you sure you want to remove Item Type "]+ ;
				this.parent.lstItemTypes.Value+[" from the catalog table?],292)#6
			RETURN
		ENDIF
		thisform.lObjectUpdated=.T.
		thisform.oObject.oHost.oEdit.Delete
		thisform.RefreshItemTypes(this.parent.lstItemTypes)
		IF this.parent.lstItemTypes.ListCount=0
			this.parent.lstItemTypes.ListIndex=0
		ELSE
			this.parent.lstItemTypes.ListIndex=1
		ENDIF
		this.parent.lstItemTypes.SetFocus
		
	ENDPROC

	PROCEDURE cmdRemove.Refresh
		this.Enabled=(this.parent.lstItemTypes.ListIndex>=1)
		
	ENDPROC

	PROCEDURE lstItemTypes.InteractiveChange
		IF this.ListIndex>=1
			thisform.oObject.oHost.oEdit=thisform.aItemTypes[this.ListItemID]
		ELSE
			thisform.oObject.oHost.oEdit=.NULL.
		ENDIF
		this.parent.Refresh
		
	ENDPROC

	PROCEDURE lstItemTypes.ProgrammaticChange
		this.InteractiveChange
		
	ENDPROC

	PROCEDURE txtText.LostFocus
		LOCAL lcValue
		
		IF NOT DODEFAULT()
			RETURN .F.
		ENDIF
		lcValue=ALLTRIM(this.Value)
		IF lcValue==ALLTRIM(this.parent.lstItemTypes.Value)
			RETURN
		ENDIF
		thisform.oObject.oHost.oEdit=.NULL.
		thisform.RefreshItemTypes(this.parent.lstItemTypes)
		this.parent.lstItemTypes.Value=lcValue
		
	ENDPROC

ENDDEFINE

DEFINE CLASS advancednodeproperties AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLink" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLink" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClassName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClassName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblClassLib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClassLib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClassLib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblItemClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtItemClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFileName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFileName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFileName" UniqueID="" Timestamp="" />

	#INCLUDE "browser.h"
	BackStyle = 0
	BorderWidth = 0
	Height = 230
	Name = "advancednodeproperties"
	Width = 455

	ADD OBJECT 'cmdClassLib' AS getfilebutton WITH ;
		cclassproperty = cClassName, ;
		cgetfileext = vcx, ;
		cobjname = parent.txtClassLib, ;
		cproperty = cClassLib, ;
		Left = 434, ;
		Name = "cmdClassLib", ;
		TabIndex = 9, ;
		Top = 91
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdFileName' AS getfilebutton WITH ;
		cgetfileext = htm;html;asp;txt;doc;xls;ppt;gif;jpg;jpeg;au;aiff;xbm;app;dbc;pjx;vcx, ;
		cobjname = parent.txtFileName, ;
		cproperty = cFileName, ;
		Left = 434, ;
		Name = "cmdFileName", ;
		TabIndex = 14, ;
		Top = 151
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblClassLib' AS builderlabel WITH ;
		Caption = "Class library:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblClassLib", ;
		TabIndex = 7, ;
		Top = 94, ;
		Width = 60
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'lblClassName' AS builderlabel WITH ;
		Caption = "Class name:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblClassName", ;
		TabIndex = 5, ;
		Top = 64, ;
		Width = 59
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'lblFileName' AS builderlabel WITH ;
		Caption = "File name:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblFileName", ;
		TabIndex = 12, ;
		Top = 154, ;
		Width = 50
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'lblID' AS builderlabel WITH ;
		Caption = "ID:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblID", ;
		TabIndex = 1, ;
		Top = 4, ;
		Width = 16
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'lblItemClass' AS builderlabel WITH ;
		Caption = "Item class:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblItemClass", ;
		TabIndex = 10, ;
		Top = 124, ;
		Width = 52
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'lblLink' AS builderlabel WITH ;
		Caption = "Link ID:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblLink", ;
		TabIndex = 3, ;
		Top = 34, ;
		Width = 39
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'txtClassLib' AS buildertextbox WITH ;
		cproperty = cClassLib, ;
		Height = 24, ;
		Left = 80, ;
		lupdateonchange = .F., ;
		Name = "txtClassLib", ;
		StatusBarText = "Class library of node items", ;
		TabIndex = 8, ;
		Top = 90, ;
		Width = 349
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtClassName' AS buildertextbox WITH ;
		cproperty = cClassName, ;
		Height = 24, ;
		Left = 80, ;
		lupdateonchange = .F., ;
		Name = "txtClassName", ;
		StatusBarText = "Class name of node item", ;
		TabIndex = 6, ;
		Top = 60, ;
		Width = 375
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtFileName' AS buildertextbox WITH ;
		cproperty = cFileName, ;
		Height = 24, ;
		Left = 80, ;
		lupdateonchange = .F., ;
		Name = "txtFileName", ;
		StatusBarText = "File name of node item", ;
		TabIndex = 13, ;
		Top = 150, ;
		Width = 350
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtID' AS buildertextbox WITH ;
		cproperty = cID, ;
		cvalidexpression = NOT EMPTY(Value), ;
		Height = 24, ;
		Left = 80, ;
		lreadonly = .T., ;
		lupdateonchange = .F., ;
		Name = "txtID", ;
		StatusBarText = "ID of node item", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 375
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtItemClass' AS buildertextbox WITH ;
		cproperty = cItemClass, ;
		Height = 24, ;
		Left = 80, ;
		lupdateonchange = .F., ;
		Name = "txtItemClass", ;
		StatusBarText = "Default class for node items in folder", ;
		TabIndex = 11, ;
		Top = 120, ;
		Width = 375
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtLink' AS buildertextbox WITH ;
		cproperty = cLink, ;
		Height = 24, ;
		Left = 80, ;
		lreadonly = .T., ;
		lupdateonchange = .F., ;
		Name = "txtLink", ;
		StatusBarText = "Link ID of node item", ;
		TabIndex = 4, ;
		Top = 30, ;
		Width = 375
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="textbox" />
	
	PROCEDURE Init
		IF NOT thisform.oObject.lFolder
			this.RemoveObject("lblItemClass")
			this.RemoveObject("txtItemClass")
			this.RemoveObject("lblFileName")
			this.RemoveObject("txtFileName")
			this.RemoveObject("cmdFileName")
		ENDIF
		
	ENDPROC

	PROCEDURE lblFileName.Init
		IF thisform.oObject.lGetFileAddress
			this.Caption=M_DYNAMIC_FOLDER_LOC+":"
		ENDIF
		
	ENDPROC

	PROCEDURE txtFileName.Init
		IF thisform.oObject.lGetFileAddress
			this.StatusBarText=M_DYNAMIC_FOLDER_SBM_LOC
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS advancedscriptproperties AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtPrpoerties" UniqueID="" Timestamp="" />

	#INCLUDE "browser.h"
	BackStyle = 0
	BorderWidth = 0
	Height = 230
	Name = "advancedscriptproperties"
	Width = 457

	ADD OBJECT 'edtPrpoerties' AS buildereditbox WITH ;
		AllowTabs = .T., ;
		cproperty = cProperties, ;
		FontName = "Courier New", ;
		Height = 106, ;
		IntegralHeight = .F., ;
		lallowenter = .T., ;
		Left = 54, ;
		Name = "edtPrpoerties", ;
		nmaxlength = 0, ;
		StatusBarText = "Property definitions", ;
		TabIndex = 4, ;
		Top = 116, ;
		Width = 403
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtScript' AS buildereditbox WITH ;
		AllowTabs = .T., ;
		cproperty = cScript, ;
		FontName = "Courier New", ;
		Height = 106, ;
		IntegralHeight = .F., ;
		lallowenter = .T., ;
		Left = 54, ;
		Name = "edtScript", ;
		nmaxlength = 0, ;
		StatusBarText = "Script code", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 403
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblProperties' AS builderlabel WITH ;
		Caption = "Properties:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblProperties", ;
		TabIndex = 3, ;
		Top = 116, ;
		Width = 52
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'lblScript' AS builderlabel WITH ;
		Caption = "Script:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblScript", ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 32
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

ENDDEFINE

DEFINE CLASS advancedviewproperties AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtViews" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblKeywords" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtKeywords" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblViews" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdKeywords" UniqueID="" Timestamp="" />

	#INCLUDE "browser.h"
	BackStyle = 0
	BorderWidth = 0
	Height = 230
	Name = "advancedviewproperties"
	Width = 458

	ADD OBJECT 'cmdKeywords' AS keywordsbutton WITH ;
		cobjname = this.parent.edtKeywords, ;
		cproperty = thisform.oObject.cKeywords, ;
		Left = 437, ;
		Name = "cmdKeywords", ;
		TabIndex = 5, ;
		Top = 116
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtKeywords' AS buildereditbox WITH ;
		AllowTabs = .T., ;
		cproperty = cKeywords, ;
		FontName = "Courier New", ;
		Height = 106, ;
		IntegralHeight = .F., ;
		lallowenter = .T., ;
		Left = 59, ;
		Name = "edtKeywords", ;
		nmaxlength = 0, ;
		SelectOnEntry = .T., ;
		StatusBarText = "Keyword list", ;
		TabIndex = 4, ;
		Top = 116, ;
		Width = 373
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtViews' AS buildereditbox WITH ;
		AllowTabs = .T., ;
		cproperty = cViews, ;
		FontName = "Courier New", ;
		Height = 106, ;
		IntegralHeight = .F., ;
		lallowenter = .T., ;
		Left = 59, ;
		Name = "edtViews", ;
		nmaxlength = 0, ;
		StatusBarText = "View definitions", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 398
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="editbox" />

	ADD OBJECT 'lblKeywords' AS builderlabel WITH ;
		Caption = "Views:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblKeywords", ;
		TabIndex = 3, ;
		Top = 0, ;
		Width = 33
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

	ADD OBJECT 'lblViews' AS builderlabel WITH ;
		Caption = "Keywords:", ;
		Height = 15, ;
		Left = 0, ;
		Name = "lblViews", ;
		TabIndex = 1, ;
		Top = 116, ;
		Width = 51
		*< END OBJECT: ClassLib="browser.vcx" BaseClass="label" />

ENDDEFINE

DEFINE CLASS browserdialog AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "browser.h"
	*<DefinedPropArrayMethod>
		*m: setfont
		*p: llargefont
		*p: lobjectupdated
		*p: ohost
		*p: oobject
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Class Browser Dialog"
	DataSession = 2
	DoCreate = .T.
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 172
	KeyPreview = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "browserdialog"
	ohost = .NULL.
	oobject = .NULL.
	ShowTips = .T.
	Width = 358
	WindowType = 1
	
	PROCEDURE Activate
		ACTIVATE SCREEN
		SELECT 0
		SET MESSAGE TO
		
	ENDPROC

	PROCEDURE Deactivate
		ACTIVATE SCREEN
		SELECT 0
		SET MESSAGE TO
		
	ENDPROC

	PROCEDURE Destroy
		this.oHost=.NULL.
		this.oObject=.NULL.
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS oSource
		
		IF VARTYPE(oSource)#"O" OR oSource.lRelease
			RETURN .F.
		ENDIF
		SET DATASESSION TO oSource.DataSessionID
		this.DataSessionID=oSource.DataSessionID
		this.oHost=oSource
		this.oObject=oSource
		this.Icon=this.oHost.Icon
		this.SetFont
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode=27
			this.Release
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		SET TALK OFF
		SET COLLATE TO "MACHINE"
		SET COMPATIBLE OFF
		SET CONFIRM ON
		SET DECIMALS TO 9
		SET EXACT OFF
		SET EXCLUSIVE OFF
		SET MEMOWIDTH TO 1024
		SET MULTILOCKS ON
		SET POINT TO "."
		SET SAFETY OFF
		SET UDFPARMS TO VALUE
		WAIT CLEAR
		SELECT 0
		
	ENDPROC

	PROCEDURE QueryUnload
		this.Enabled=.F.
		this.Visible=.F.
		
	ENDPROC

	PROCEDURE Release
		this.QueryUnload
		
	ENDPROC

	PROCEDURE setfont
		IF FONTMETRIC(1,"MS Sans Serif",8,"")#13 OR ;
				FONTMETRIC(4,"MS Sans Serif",8,"")#2 OR ;
				FONTMETRIC(6,"MS Sans Serif",8,"")#5 OR ;
				FONTMETRIC(7,"MS Sans Serif",8,"")#11
			this.lLargeFont=.T.
			this.SetAll("FontName","Arial")
			RETURN
		ENDIF
		RETURN .F.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS buildercheckbox AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: disable
		*m: release		&& Releases object from memory.
		*p: builder
		*p: builderx
		*p: cproperty
		*p: ctype
		*p: cversion
		*p: lautorefresh
		*p: leditmode
		*p: lreadonly
	*</DefinedPropArrayMethod>

	AutoSize = .T.
	BackStyle = 0
	builder = 
	builderx = BuilderB,BuilderCheckBoxBuilder
	Caption = "CheckBox"
	cproperty = 
	ctype = 
	cversion = 
	DisabledBackColor = (EVALUATE("RGB("+SUBSTR(RGBSCHEME(15,1),AT(",",RGBSCHEME(15,1),3)+1)))
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 15
	lautorefresh = .T.
	Name = "buildercheckbox"
	Value = .F.
	Width = 67
	
	PROCEDURE disable
		this.Enabled=.F.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE GotFocus
		this.Refresh
		this.lEditMode=.T.
		
	ENDPROC

	PROCEDURE Init
		IF EMPTY(this.cProperty) OR INLIST(this.cType,"U","O") OR ISNULL(this.Value)
			this.Value=.F.
		ENDIF
		
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL lcProperty,luValue,luPropertyValue
		
		thisform.lObjectUpdated=.T.
		lcProperty=this.cProperty
		luValue=this.Value
		IF ISNULL(luValue) OR ISNULL(lcProperty) OR EMPTY(lcProperty) OR ;
				ISNULL(thisform.oObject)
			RETURN
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		IF TYPE("luPropertyValue")=="L" AND ;
				luPropertyValue==luValue
			RETURN
		ENDIF
		thisform.lObjectUpdated=.T.
		thisform.oObject.&lcProperty=luValue
		
	ENDPROC

	PROCEDURE LostFocus
		this.lEditMode=.F.
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Refresh
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL lcProperty,luValue,luPropertyValue
		
		IF this.lEditMode
			NODEFAULT
			RETURN
		ENDIF
		this.cType=TYPE("thisform.oObject."+this.cProperty)
		lcProperty=this.cProperty
		luValue=this.Value
		IF (NOT this.lAutoRefresh AND NOT ISNULL(luValue)) OR EMPTY(lcProperty) OR ;
				ISNULL(thisform.oObject) OR TYPE("thisform.oObject."+lcProperty)#"L"
			NODEFAULT
			this.Value=.F.
			this.Disable
			RETURN
		ENDIF
		IF NOT this.lReadOnly AND NOT "."$lcProperty AND NOT ","$lcProperty AND ;
				(PEMSTATUS(thisform.oObject,lcProperty,1) OR ;
				PEMSTATUS(thisform.oObject,lcProperty,2))
			this.lReadOnly=.T.
		ENDIF
		IF this.lReadOnly
			this.Disable
		ELSE
			IF NOT this.Enabled
				this.Enabled=.T.
			ENDIF
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		IF NOT ISNULL(luValue) AND luValue==luPropertyValue
			RETURN
		ENDIF
		this.Value=luPropertyValue
		
	ENDPROC

	PROCEDURE release		&& Releases object from memory.
		RELEASE this
		
	ENDPROC

	PROCEDURE RightClick
		thisform.DefaultReset(this)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS buildercombobox AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: disable
		*m: refreshpropertyvalue
		*m: release		&& Releases object from memory.
		*p: builder
		*p: builderx
		*p: cproperty
		*p: ctype
		*p: cvalidexpression
		*p: cversion
		*p: lautorefresh
		*p: leditmode
		*p: lreadonly
		*p: lupdateonchange
	*</DefinedPropArrayMethod>

	Alignment = 3
	builder = 
	builderx = BuilderB,BuilderComboBoxBuilder
	cproperty = 
	ctype = 
	cvalidexpression = 
	cversion = 
	DisabledBackColor = (EVALUATE("RGB("+SUBSTR(RGBSCHEME(15,1),AT(",",RGBSCHEME(15,1),3)+1)))
	FontName = "MS Sans Serif"
	FontSize = 8
	Format = "K"
	Height = 24
	lautorefresh = .T.
	lupdateonchange = .T.
	Name = "buildercombobox"
	Value = .NULL.
	Width = 113
	
	PROCEDURE disable
		this.ReadOnly=.T.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE GotFocus
		this.Refresh
		this.lEditMode=.T.
		
	ENDPROC

	PROCEDURE Init
		this.Value=IIF(this.cType=="N",0,"")
		IF EMPTY(this.cProperty) OR INLIST(this.cType,"U","O")
			this.ListIndex=-1
			this.DisplayValue=""
		ENDIF
		
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL lcProperty
		
		thisform.lObjectUpdated=.T.
		lcProperty=this.cProperty
		IF ISNULL(this.DisplayValue) OR NOT this.lUpdateOnChange OR ISNULL(lcProperty) OR ;
				EMPTY(lcProperty) OR NOT this.Valid()
			RETURN
		ENDIF
		this.RefreshPropertyValue
		
	ENDPROC

	PROCEDURE LostFocus
		LOCAL lcProperty
		
		lcProperty=this.cProperty
		this.lEditMode=.F.
		IF ISNULL(lcProperty) OR EMPTY(lcProperty)
			RETURN
		ENDIF	
		this.RefreshPropertyValue
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Refresh
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL lcProperty,lcDisplayValue,luPropertyValue,luValue
		
		IF this.lEditMode
			NODEFAULT
			RETURN
		ENDIF
		this.cType=TYPE("thisform.oObject."+this.cProperty)
		lcProperty=this.cProperty
		lcDisplayValue=this.DisplayValue
		IF (NOT this.lAutoRefresh AND NOT ISNULL(lcDisplayValue)) OR EMPTY(lcProperty) OR ;
				ISNULL(thisform.oObject) OR TYPE("thisform.oObject."+lcProperty)=="U"
			NODEFAULT
			this.Value=IIF(this.cType=="N",0,"")
			this.ListIndex=-1
			this.DisplayValue=""
			this.Disable
			RETURN
		ENDIF
		IF NOT this.lReadOnly AND NOT "."$lcProperty AND NOT ","$lcProperty AND ;
				(PEMSTATUS(thisform.oObject,lcProperty,1) OR ;
				PEMSTATUS(thisform.oObject,lcProperty,2))
			this.lReadOnly=.T.
		ENDIF
		IF this.lReadOnly
			this.Disable
		ELSE
			IF this.ReadOnly
				this.ReadOnly=.F.
			ENDIF
		ENDIF
		luValue=thisform.oObject.&lcProperty
		luPropertyValue=thisform.oObject.&lcProperty
		IF TYPE("luValue")#TYPE("luPropertyValue") OR (this.cType=="N" AND NOT ;
				BETWEEN(luPropertyValue,-1,this.ListCount))
			NODEFAULT
			this.Value=IIF(this.cType=="N",0,"")
			this.ListIndex=-1
			this.DisplayValue=""
			this.Disable
			RETURN
		ENDIF
		DO CASE
			CASE this.cType=="C"
				IF lcDisplayValue==luPropertyValue
					RETURN
				ENDIF
				this.Value=luValue
				this.DisplayValue=luValue
			CASE this.cType=="N"
				IF this.ListIndex==luPropertyValue
					RETURN
				ENDIF
				this.ListIndex=luValue
				this.Value=luValue
			OTHERWISE
				IF this.Value==luPropertyValue
					RETURN
				ENDIF
				this.Value=IIF(this.cType=="N",0,"")
				this.ListIndex=-1
				this.DisplayValue=""
		ENDCASE
		
	ENDPROC

	PROTECTED PROCEDURE refreshpropertyvalue
		LOCAL lcProperty,lcDisplayValue,luPropertyValue,luValue
		
		lcProperty=this.cProperty
		lcDisplayValue=TRIM(this.DisplayValue)
		IF ISNULL(lcDisplayValue) OR ISNULL(thisform.oObject)
			RETURN
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		IF this.cType=="C"
			IF luPropertyValue==lcDisplayValue
				RETURN
			ENDIF
			thisform.lObjectUpdated=.T.
			thisform.oObject.&lcProperty=lcDisplayValue
			RETURN
		ENDIF
		DO CASE
			CASE this.cType="C"
				luValue=lcDisplayValue
				IF luValue==luPropertyValue
					RETURN
				ENDIF	
			CASE this.cType=="N"
				luValue=this.ListIndex
				IF luValue=luPropertyValue
					RETURN
				ENDIF	
			OTHERWISE
				luValue=this.Value
		ENDCASE
		thisform.lObjectUpdated=.T.
		thisform.oObject.&lcProperty=luValue
		
	ENDPROC

	PROCEDURE release		&& Releases object from memory.
		RELEASE this
		
	ENDPROC

	PROCEDURE RightClick
		thisform.DefaultReset(this)
		
	ENDPROC

	PROCEDURE Valid
		LOCAL lcValidExpression,Value,DisplayValue,Object,oTHIS,llResult
		
		IF this.ReadOnly
			RETURN
		ENDIF
		lcValidExpression=this.cValidExpression
		IF EMPTY(lcValidExpression)
			RETURN
		ENDIF
		lcValidExpression=ALLTRIM(lcValidExpression)
		IF TYPE("lcValidExpression")=="C" AND LEFT(lcValidExpression,1)=="="
			lcValidExpression=ALLTRIM(SUBSTR(lcValidExpression,2))
		ENDIF
		Value=this.Value
		DisplayValue=this.DisplayValue
		Object=thisform.oObject
		oTHIS=this
		llResult=EVALUATE(lcValidExpression)
		Value=.NULL.
		Object=.NULL.
		oTHIS=.NULL.
		IF TYPE("llResult")#"L" OR NOT llResult
			this.lEditMode=.T.
			RETURN .F.
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS buildereditbox AS editbox 
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: disable
		*m: refreshpropertyvalue
		*m: release		&& Releases a FormSet or Form from memory.
		*p: builder
		*p: builderx
		*p: cproperty
		*p: ctype
		*p: cvalidexpression
		*p: cversion
		*p: lallowenter
		*p: lautorefresh
		*p: leditmode
		*p: lreadonly
		*p: lupdateonchange
		*p: nmaxlength
	*</DefinedPropArrayMethod>

	builder = 
	builderx = BuilderB,BuilderEditBoxBuilder
	cproperty = 
	ctype = 
	cvalidexpression = 
	cversion = 
	DisabledBackColor = (EVALUATE("RGB("+SUBSTR(RGBSCHEME(15,1),AT(",",RGBSCHEME(15,1),3)+1)))
	FontName = "MS Sans Serif"
	FontSize = 8
	IntegralHeight = .T.
	lautorefresh = .T.
	lupdateonchange = .F.
	Name = "buildereditbox"
	nmaxlength = 250
	Value = .NULL.
	
	PROCEDURE disable
		this.ReadOnly=.T.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE GotFocus
		this.Refresh
		this.lEditMode=.T.
		
	ENDPROC

	PROCEDURE Init
		IF EMPTY(this.cProperty) OR INLIST(this.cType,"U","O") OR ISNULL(this.Value)
			this.Value=""
		ENDIF
		
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL lcProperty,luValue
		
		thisform.lObjectUpdated=.T.
		lcProperty=this.cProperty
		luValue=this.Text
		IF ISNULL(luValue) OR NOT this.lUpdateOnChange OR ISNULL(lcProperty) OR ;
				EMPTY(lcProperty) OR TYPE("luValue")#"C" OR NOT this.Valid()
			RETURN
		ENDIF
		this.RefreshPropertyValue
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF NOT this.lAllowEnter AND nKeyCode=13
			NODEFAULT
			RETURN .F.
		ENDIF
		IF nKeyCode#127 AND this.nMaxLength>0 AND LEN(this.Text)>this.nMaxLength
			this.Value=LEFT(this.Text,this.nMaxLength)
		ENDIF
		
	ENDPROC

	PROCEDURE LostFocus
		LOCAL lcProperty
		
		lcProperty=this.cProperty
		this.lEditMode=.F.
		IF ISNULL(lcProperty) OR EMPTY(lcProperty)
			RETURN
		ENDIF
		this.RefreshPropertyValue
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Refresh
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL lcProperty,luValue,luPropertyValue
		
		IF this.lEditMode
			NODEFAULT
			RETURN
		ENDIF
		this.cType=TYPE("thisform.oObject."+this.cProperty)
		lcProperty=this.cProperty
		luValue=this.Text
		IF (NOT this.lAutoRefresh AND NOT ISNULL(luValue)) OR EMPTY(lcProperty) OR ;
				ISNULL(thisform.oObject) OR TYPE("thisform.oObject."+lcProperty)=="U"
			NODEFAULT
			this.Value=""
			this.Disable
			RETURN
		ENDIF
		IF NOT this.lReadOnly AND NOT "."$lcProperty AND NOT ","$lcProperty AND ;
				(PEMSTATUS(thisform.oObject,lcProperty,1) OR ;
				PEMSTATUS(thisform.oObject,lcProperty,2))
			this.lReadOnly=.T.
		ENDIF
		IF this.lReadOnly
			this.Disable
		ELSE
			IF this.ReadOnly
				this.ReadOnly=.F.
			ENDIF
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		IF NOT ISNULL(luValue) AND TYPE("luValue")==TYPE("luPropertyValue") AND ;
				luValue==luPropertyValue
			RETURN
		ENDIF
		this.Value=thisform.oObject.&lcProperty
		
	ENDPROC

	PROCEDURE refreshpropertyvalue
		LOCAL lcProperty,luValue,luPropertyValue
		
		lcProperty=this.cProperty
		luValue=this.Text
		IF ISNULL(luValue) OR ISNULL(thisform.oObject)
			RETURN
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		IF TYPE("luValue")=="C"
			luValue=TRIM(luValue)
			IF luPropertyValue==luValue
				RETURN
			ENDIF
			thisform.lObjectUpdated=.T.
			thisform.oObject.&lcProperty=luValue
			RETURN
		ENDIF
		IF luPropertyValue==luValue
			RETURN
		ENDIF
		thisform.lObjectUpdated=.T.
		thisform.oObject.&lcProperty=luValue
		
	ENDPROC

	PROCEDURE release		&& Releases a FormSet or Form from memory.
		RELEASE this
		
	ENDPROC

	PROCEDURE RightClick
		thisform.DefaultReset(this)
		
	ENDPROC

	PROCEDURE Valid
		LOCAL lcValidExpression,Value,Object,oTHIS,llResult
		
		IF this.ReadOnly
			RETURN
		ENDIF
		lcValidExpression=this.cValidExpression
		IF EMPTY(lcValidExpression)
			RETURN
		ENDIF
		lcValidExpression=ALLTRIM(lcValidExpression)
		IF TYPE("lcValidExpression")=="C" AND LEFT(lcValidExpression,1)=="="
			lcValidExpression=ALLTRIM(SUBSTR(lcValidExpression,2))
		ENDIF
		Value=this.Text
		Object=thisform.oObject
		oTHIS=this
		llResult=EVALUATE(lcValidExpression)
		Value=.NULL.
		Object=.NULL.
		oTHIS=.NULL.
		IF TYPE("llResult")#"L" OR NOT llResult
			this.lEditMode=.T.
			RETURN .F.
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS builderlabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: release		&& Releases object from memory.
		*p: builder
		*p: builderx
		*p: cversion
	*</DefinedPropArrayMethod>

	AutoSize = .T.
	BackStyle = 0
	builder = 
	builderx = BuilderB,CaptionBuilder
	Caption = "Label1"
	cversion = 
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 15
	Name = "builderlabel"
	Width = 34
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE release		&& Releases object from memory.
		RELEASE this
		
	ENDPROC

ENDDEFINE

DEFINE CLASS builderoptiongroup AS optiongroup 
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: disable
		*m: release		&& Releases object from memory.
		*p: builder
		*p: builderx
		*p: cproperty
		*p: ctype
		*p: cversion
		*p: lautorefresh
		*p: leditmode
		*p: lreadonly
	*</DefinedPropArrayMethod>

	AutoSize = .T.
	BackColor = (EVALUATE("RGB("+SUBSTR(RGBSCHEME(15,1),AT(",",RGBSCHEME(15,1),3)+1)))
	BackStyle = 0
	builder = 
	builderx = BuilderB,BuilderOptionGroupBuilder
	ButtonCount = 2
	cproperty = 
	ctype = 
	cversion = 
	Height = 44
	lautorefresh = .T.
	Name = "builderoptiongroup"
	Value = 1
	Width = 65
	Option1.AutoSize = .T.
	Option1.Caption = "Option1"
	Option1.FontName = "MS Sans Serif"
	Option1.FontSize = 8
	Option1.Height = 15
	Option1.Left = 5
	Option1.Name = "Option1"
	Option1.Top = 5
	Option1.Value = 1
	Option1.Width = 55
	Option2.AutoSize = .T.
	Option2.Caption = "Option2"
	Option2.FontName = "MS Sans Serif"
	Option2.FontSize = 8
	Option2.Height = 15
	Option2.Left = 5
	Option2.Name = "Option2"
	Option2.Top = 24
	Option2.Width = 55
	
	PROCEDURE disable
		this.Enabled=.F.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE Init
		IF EMPTY(this.cProperty) OR INLIST(this.cType,"U","O") OR ISNULL(this.Value)
			this.Value=0
		ENDIF
		
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL lcProperty,luValue,luPropertyValue,lcType
		
		thisform.lObjectUpdated=.T.
		lcProperty=this.cProperty
		luValue=this.Value
		IF ISNULL(luValue) OR ISNULL(lcProperty) OR EMPTY(lcProperty) OR ;
				ISNULL(thisform.oObject)
			RETURN
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		lcType=TYPE("luPropertyValue")
		IF NOT INLIST(lcType,"L","N")
			RETURN
		ENDIF
		IF lcType=="L"
			luValue=(luValue>=2)
		ENDIF
		IF luPropertyValue==luValue
			RETURN
		ENDIF
		thisform.lObjectUpdated=.T.
		thisform.oObject.&lcProperty=luValue
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Refresh
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL lcProperty,luValue,luPropertyValue
		
		IF this.lEditMode
			NODEFAULT
			RETURN
		ENDIF
		this.cType=TYPE("thisform.oObject."+this.cProperty)
		lcProperty=this.cProperty
		luValue=this.Value
		IF (NOT this.lAutoRefresh AND NOT ISNULL(luValue)) OR EMPTY(lcProperty) OR ;
				ISNULL(thisform.oObject) OR ;
				NOT INLIST(TYPE("thisform.oObject."+lcProperty),"L","N")
			NODEFAULT
			this.Value=0
			this.Disable
			RETURN
		ENDIF
		IF NOT this.lReadOnly AND NOT "."$lcProperty AND NOT ","$lcProperty AND ;
				(PEMSTATUS(thisform.oObject,lcProperty,1) OR ;
				PEMSTATUS(thisform.oObject,lcProperty,2))
			this.lReadOnly=.T.
		ENDIF
		IF this.lReadOnly
			this.Disable
		ELSE
			IF NOT this.Enabled
				this.Enabled=.T.
			ENDIF
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		IF TYPE("luPropertyValue")=="L"
			luPropertyValue=IIF(luPropertyValue,2,1)
		ENDIF
		IF NOT ISNULL(luValue) AND luValue==luPropertyValue
			RETURN
		ENDIF
		this.Value=luPropertyValue
		
	ENDPROC

	PROCEDURE release		&& Releases object from memory.
		RELEASE this
		
	ENDPROC

	PROCEDURE RightClick
		thisform.DefaultReset(this)
		
	ENDPROC

	PROCEDURE Option1.Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE Option2.Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS buildertextbox AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: disable
		*m: refreshinputmask
		*m: refreshpropertyvalue
		*m: release		&& Releases object from memory.
		*p: builder
		*p: builderx
		*p: cproperty
		*p: ctype
		*p: cvalidexpression
		*p: cversion
		*p: lautorefresh
		*p: leditmode
		*p: lreadonly
		*p: lupdateonchange
	*</DefinedPropArrayMethod>

	Alignment = 3
	builder = 
	builderx = BuilderB,BuilderTextBoxBuilder
	cproperty = 
	ctype = 
	cvalidexpression = 
	cversion = 
	DisabledBackColor = (EVALUATE("RGB("+SUBSTR(RGBSCHEME(15,1),AT(",",RGBSCHEME(15,1),3)+1)))
	FontName = "MS Sans Serif"
	FontSize = 8
	Format = "K"
	Height = 24
	lautorefresh = .T.
	lupdateonchange = .T.
	Name = "buildertextbox"
	Value = .NULL.
	Width = 113
	
	PROCEDURE disable
		this.ReadOnly=.T.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE GotFocus
		this.Refresh
		this.lEditMode=.T.
		
	ENDPROC

	PROCEDURE Init
		IF EMPTY(this.cProperty) OR INLIST(this.cType,"U","O") OR ISNULL(this.Value)
			this.Value=""
		ENDIF
		
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL lcProperty,luValue
		
		thisform.lObjectUpdated=.T.
		lcProperty=this.cProperty
		luValue=this.Value
		IF ISNULL(luValue) OR NOT this.lUpdateOnChange OR ISNULL(lcProperty) OR ;
				EMPTY(lcProperty) OR TYPE("luValue")#"C" OR NOT this.Valid()
			RETURN
		ENDIF
		this.RefreshPropertyValue
		
	ENDPROC

	PROCEDURE LostFocus
		LOCAL lcProperty
		
		lcProperty=this.cProperty
		this.lEditMode=.F.
		IF ISNULL(lcProperty) OR EMPTY(lcProperty)
			RETURN
		ENDIF	
		this.RefreshPropertyValue
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		this.Refresh
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		this.RefreshInputMask
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL lcProperty,luValue,luPropertyValue
		
		IF this.lEditMode
			NODEFAULT
			RETURN
		ENDIF
		this.cType=TYPE("thisform.oObject."+this.cProperty)
		lcProperty=this.cProperty
		luValue=this.Value
		IF (NOT this.lAutoRefresh AND NOT ISNULL(luValue)) OR EMPTY(lcProperty) OR ;
				ISNULL(thisform.oObject) OR TYPE("thisform.oObject."+lcProperty)=="U"
			NODEFAULT
			this.Value=""
			this.Disable
			RETURN
		ENDIF
		IF NOT this.lReadOnly AND NOT "."$lcProperty AND NOT ","$lcProperty AND ;
				(PEMSTATUS(thisform.oObject,lcProperty,1) OR ;
				PEMSTATUS(thisform.oObject,lcProperty,2))
			this.lReadOnly=.T.
		ENDIF
		IF this.lReadOnly
			this.Disable
		ELSE
			IF this.ReadOnly
				this.ReadOnly=.F.
			ENDIF
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		IF NOT ISNULL(luValue) AND TYPE("luValue")==TYPE("luPropertyValue") AND ;
				luValue==luPropertyValue
			RETURN
		ENDIF
		this.Value=thisform.oObject.&lcProperty
		
	ENDPROC

	PROTECTED PROCEDURE refreshinputmask
		IF TYPE("this.Value")=="C"
			this.InputMask=REPLICATE("X",254)
		ELSE
			this.InputMask=""
		ENDIF
		
	ENDPROC

	PROTECTED PROCEDURE refreshpropertyvalue
		LOCAL lcProperty,luValue,luPropertyValue
		
		lcProperty=this.cProperty
		luValue=this.Value
		IF ISNULL(luValue) OR ISNULL(thisform.oObject)
			RETURN
		ENDIF
		luPropertyValue=thisform.oObject.&lcProperty
		IF TYPE("luValue")=="C"
			luValue=TRIM(luValue)
			IF luPropertyValue==luValue
				RETURN
			ENDIF
			thisform.lObjectUpdated=.T.
			thisform.oObject.&lcProperty=luValue
			RETURN
		ENDIF
		IF luPropertyValue==luValue
			RETURN
		ENDIF	
		thisform.lObjectUpdated=.T.
		thisform.oObject.&lcProperty=luValue
		
	ENDPROC

	PROCEDURE release		&& Releases object from memory.
		RELEASE this
		
	ENDPROC

	PROCEDURE RightClick
		thisform.DefaultReset(this)
		
	ENDPROC

	PROCEDURE Valid
		LOCAL lcValidExpression,Value,Object,oTHIS,llResult
		
		IF this.ReadOnly
			RETURN
		ENDIF
		lcValidExpression=this.cValidExpression
		IF EMPTY(lcValidExpression)
			RETURN
		ENDIF
		lcValidExpression=ALLTRIM(lcValidExpression)
		IF TYPE("lcValidExpression")=="C" AND LEFT(lcValidExpression,1)=="="
			lcValidExpression=ALLTRIM(SUBSTR(lcValidExpression,2))
		ENDIF
		Value=this.Value
		Object=thisform.oObject
		oTHIS=this
		llResult=EVALUATE(lcValidExpression)
		Value=.NULL.
		Object=.NULL.
		oTHIS=.NULL.
		IF TYPE("llResult")#"L" OR NOT llResult
			this.lEditMode=.T.
			RETURN .F.
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS getfilebutton AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "browser.h"
	*<DefinedPropArrayMethod>
		*m: getfile
		*m: lreadonly_assign
		*p: cclassproperty
		*p: cgetfileext
		*p: cobjname
		*p: cproperty
		*p: lfullpath
		*p: lreadonly
	*</DefinedPropArrayMethod>

	Caption = "..."
	cclassproperty = 
	cgetfileext = 
	cobjname = 
	cproperty = 
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 23
	lfullpath = .T.
	Name = "getfilebutton"
	TabIndex = 1
	Width = 21
	
	PROCEDURE Click
		this.GetFile
		
	ENDPROC

	PROCEDURE getfile
		LOCAL lcFileName,lcProperty,lcObjName,lcClass,lnAtPos,llGetClass,lcClassProperty,lcCatalogPath
		
		lcProperty=LOWER(ALLTRIM(this.cProperty))
		lcObjName=LOWER(ALLTRIM(this.cObjName))
		IF EMPTY(lcProperty)
			RETURN
		ENDIF
		llGetClass=.F.
		lcCatalogPath=thisform.oObject.cCatalogPath
		IF lcProperty=="cfilename"
			DO WHILE .T.
				lcFileName=LOWER(thisform.oObject.GetFile(this.cGetFileExt,.T.))
				IF EMPTY(lcFileName)
					RETURN
				ENDIF
				IF "/"$lcFileName OR ","$lcFileName OR FILE(lcFileName)
					EXIT
				ENDIF
				MESSAGEBOX(M_FILE_LOC+[ "]+lcFileName+[" ]+M_NOT_FOUND_LOC+[.],16,thisform.Caption)
			ENDDO
			IF LEFT(lcFileName,7)=="file://" AND INLIST(JUSTEXT(lcFileName)+" ","dbc ","pjx ","vcx ")
				lcFileName=ALLTRIM(STRTRAN(SUBSTR(lcFileName,8),"/","\"))
			ENDIF
			IF NOT ":"$lcFileName AND ATC("file:",lcFileName)=0
				lcFileName=LOWER(SYS(2014,lcFileName,lcCatalogPath))
				IF this.lFullPath
					lcFileName=LOWER(FULLPATH(lcFileName,lcCatalogPath))
				ENDIF
			ENDIF
		ELSE
			lcFileName=thisform.oHost.GetFile(this.cGetFileExt,.T.)
			lnAtPos=AT(",",lcFileName)
			IF lnAtPos>0
				llGetClass=.T.
				lcClass=ALLTRIM(SUBSTR(lcFileName,lnAtPos+1))
				lcFileName=ALLTRIM(LEFT(lcFileName,lnAtPos-1))
			ENDIF
			IF EMPTY(lcFileName)
				RETURN
			ENDIF
			lcFileName=LOWER(SYS(2014,lcFileName,lcCatalogPath))
			IF this.lFullPath
				lcFileName=LOWER(FULLPATH(lcFileName,lcCatalogPath))
			ENDIF
		ENDIF
		thisform.lObjectUpdated=.T.
		thisform.oObject.&lcProperty=lcFileName
		IF NOT EMPTY(lcObjName)
			WITH this.&lcObjName
				.Refresh
				.SetFocus
			ENDWITH
			lcClassProperty=LOWER(ALLTRIM(this.cClassProperty))
			IF llGetClass AND NOT EMPTY(lcClassProperty)
				thisform.oObject.&lcClassProperty=lcClass
				this.parent.Refresh
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE lreadonly_assign
		LPARAMETERS m.vNewVal
		
		this.lReadOnly=m.vNewVal
		this.Refresh
		
	ENDPROC

	PROCEDURE Refresh
		this.Enabled=(NOT this.lReadOnly)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS keywordsbutton AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "browser.h"
	*<DefinedPropArrayMethod>
		*m: lreadonly_assign
		*p: cobjname
		*p: cproperty
		*p: lreadonly
	*</DefinedPropArrayMethod>

	Caption = "..."
	cobjname = 
	cproperty = 
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 23
	Name = "keywordsbutton"
	Width = 21
	
	PROCEDURE Click
		LOCAL lcProperty,lcObjName,lcKeywords
		
		lcProperty=LOWER(ALLTRIM(this.cProperty))
		lcObjName=LOWER(ALLTRIM(this.cObjName))
		IF EMPTY(lcProperty)
			RETURN
		ENDIF
		lcKeywords=thisform.oHost.Keywords()
		IF NOT EMPTY(lcKeywords)
			lcKeywords=ALLTRIM(ALLTRIM(EVALUATE(lcProperty))+" "+lcKeywords)
			&lcProperty=lcKeywords
		ENDIF
		IF EMPTY(lcObjName)
			RETURN
		ENDIF
		WITH &lcObjName
			.Refresh
			.SetFocus
		ENDWITH
		
	ENDPROC

	PROCEDURE lreadonly_assign
		LPARAMETERS m.vNewVal
		
		this.lReadOnly=m.vNewVal
		this.Refresh
		
	ENDPROC

	PROCEDURE Refresh
		this.Enabled=(NOT this.lReadOnly)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS memberslistbox AS listbox 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "browser.h"
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 222
	Name = "memberslistbox"
	StatusBarText = "Members list"
	TabIndex = 9
	Width = 219
	
	PROCEDURE Clear
		this.ListIndex=0
		
	ENDPROC

	PROCEDURE DblClick
		LPARAMETERS lcProgram
		LOCAL lcClassLibrary,lcClass,lnAtPos,lcMember,lcMemberChar
		LOCAL lcHelpFile,lnHelpID,lnAtPos
		
		IF EMPTY(lcProgram)
			lcProgram=PROGRAM()
		ENDIF
		IF thisform.lRelease OR thisform.nMemberListIndex<1
			RETURN
		ENDIF
		IF thisform.AddInMethod(lcProgram)
			RETURN
		ENDIF
		WITH thisform
			lcMember=.aMemberList[.nMemberListIndex,1]
			lcMemberChar=.aMemberList[.nMemberListIndex,2]
		ENDWITH
		IF NOT thisform.lVCXSCXMode
			lcHelpFile=lcMemberChar
			lnHelpID=0
			lnAtPos=AT(",",lcHelpFile)
			IF lnAtPos>0
				lnHelpID=VAL(SUBSTR(lcHelpFile,lnAtPos+1))
				lcHelpFile=ALLTRIM(LEFT(lcHelpFile,lnAtPos-1))
			ENDIF
			IF EMPTY(lcHelpFile)
				thisform.MsgBox(M_HELP_NOT_AVAILABLE_LOC+[.],16)
				RETURN
			ENDIF
			IF NOT FILE(lcHelpFile)
				thisform.MsgBox(M_FILE_LOC+[ "]+lcHelpFile+[" ]+M_DOES_NOT_EXIST_LOC+[.],16)
				RETURN
			ENDIF
			thisform.ShellExecute(lcHelpFile)
			RETURN
		ENDIF
		IF lcMemberChar=="m"
			RETURN thisform.ModifyClass(lcMember)
		ENDIF
		IF lcMemberChar=="p"
			RETURN thisform.ViewProperty(lcMember)
		ENDIF
		IF lcMemberChar=="o"
			IF EMPTY(thisform.cLastValue)
				RETURN
			ENDIF
			lcClassLibrary=ALLTRIM(thisform.cLastValue)
			lnAtPos=AT(",",lcClassLibrary)
			IF lnAtPos=0
				RETURN
			ENDIF
			lcClass=LOWER(ALLTRIM(SUBSTR(lcClassLibrary,lnAtPos+1)))
			lcClassLibrary=LOWER(ALLTRIM(LEFT(lcClassLibrary,lnAtPos-1)))
			IF EMPTY(SYS(2000,lcClassLibrary))
				SELECT 0
				SET MESSAGE TO
				thisform.MsgBox(M_FILE_LOC+[ "]+lcClassLibrary+ ;
						[" ]+M_DOES_NOT_EXIST_LOC+[.],16)
				RETURN .F.
			ENDIF
			IF NOT thisform.AddFile(lcClassLibrary)
				RETURN .F.
			ENDIF
			RETURN thisform.SeekClass(lcClass,lcClassLibrary)
		ENDIF
		
	ENDPROC

	PROCEDURE DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		RETURN thisform.DragDrop(oSource,nXCoord,nYCoord)
		
	ENDPROC

	PROCEDURE DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		RETURN thisform.DragOver(oSource,nXCoord,nYCoord,nState)
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE InteractiveChange
		IF this.ListIndex=0
			thisform.nMemberListIndex=-1
			RETURN
		ENDIF
		thisform.nMemberListIndex=this.ListIndex
		thisform.RefreshCaption
		thisform.RefreshButtons
		thisform.edtMemberDesc.Refresh
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode=13
				NODEFAULT
				RETURN .F.
			CASE nKeyCode=32
				this.DblClick
				RETURN
			CASE nKeyCode=93
				IF nShiftAltCtrl=1
					thisform.DisplayMenu(2)
				ENDIF
				NODEFAULT
				RETURN
			CASE nKeyCode=112
				HELP ID (thisform.HelpContextID) NOWAIT
				RETURN
			OTHERWISE
				RETURN thisform.KeyPress(nKeyCode,nShiftAltCtrl)
		ENDCASE
		
	ENDPROC

	PROCEDURE ProgrammaticChange
		this.InteractiveChange
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL lnChildCount,laObjects,laObjects2,laObjectRecNo,lnObjectCount
		LOCAL lcSeparator,lcProtectedSeparator,lcEmptySeparator,lcHiddenSeparator
		LOCAL lcItem,lcItem2,laMethods,lnMethodCount,laProperties,lnPropertyCount
		LOCAL laProtected,lnProtectedCount,laInstances,lnInstanceCount,lnCount
		LOCAL lnAtPos,llMethod,lcMemberChar,lcObjName,laHidden,lnHiddenCount
		LOCAL llShowProtected,llProtectedMatch,llShowEmpty,lnRecNo,llShowHidden,llHiddenMatch
		
		IF thisform.lRelease
			RETURN .F.
		ENDIF
		IF NOT thisform.lRefreshMode
			thisform.lRefreshMode=.T.
			RETURN .F.
		ENDIF
		WITH thisform
			DIMENSION .aMemberList[1,3]
			.aMemberList=""
			.nMemberCount=0
			.nMemberListIndex=-1
			DIMENSION .aInstances[1]
			.aInstances=""
			.nInstances=0
			.nTimeStamp=-1
			.RefreshRecNo
		ENDWITH
		IF NOT thisform.lVCXSCXMode
			RETURN
		ENDIF
		IF EMPTY(thisform.cClass) OR thisform.lFileMode OR NOT USED(thisform.cAlias)
			this.Clear
			IF EMPTY(thisform.cClass)
				RETURN
			ENDIF
		ENDIF
		SELECT (thisform.cAlias)
		llShowProtected=thisform.lProtectedFilter
		llShowHidden=thisform.lHiddenFilter
		llShowEmpty=thisform.lEmptyFilter
		lcSeparator=SPACE(10)
		lcProtectedSeparator=SPACE(4)+"*"+SPACE(5)
		lcHiddenSeparator=SPACE(4)+"^"+SPACE(5)
		DIMENSION laHidden[1]
		laHidden=""
		lnHiddenCount=0
		DIMENSION laProtected[1]
		laProtected=""
		lnProtectedCount=0
		DIMENSION laObjects[1]
		laObjects=""
		DIMENSION laObjects2[1]
		laObjects2=""
		DIMENSION laObjectRecNo[1]
		laObjectRecNo=0
		lnObjectCount=0
		DIMENSION laMethods[1]
		laMethods=""
		lnMethodCount=0
		DIMENSION laProperties[1]
		laProperties=""
		lnPropertyCount=0
		DIMENSION laInstances[1]
		laInstances=""
		lnInstanctCount=0
		IF thisform.lFileMode
			RETURN
		ENDIF
		SELECT (thisform.cAlias)
		thisform.nTimeStamp=IIF(TYPE("Timestamp")=="N",Timestamp,0)
		IF NOT EMPTY(thisform.cClass) AND NOT thisform.lFileMode
			thisform.nInstances=AINSTANCE(thisform.aInstances,thisform.cClass)
			IF thisform.nInstances=0
				DIMENSION thisform.aInstances[1]
				thisform.aInstances=""
			ENDIF
		ENDIF
		lcObjName=LOWER(ALLTRIM(ObjName))
		IF thisform.lSCXMode
			lnRecNo=RECNO()
			SKIP
			COUNT REST FOR ALLTRIM(LOWER(Parent))==thisform.cClass ;
					TO lnChildCount
			GO lnRecNo
			FOR lnCount = 1 TO lnChildCount
				SKIP
				IF NOT ALLTRIM(LOWER(Parent))==thisform.cClass
					lnCount=lnCount-1
					LOOP
				ENDIF
				lcItem=LOWER(ALLTRIM(ObjName))				
				lcItem=lcSeparator+lcItem
				lnObjectCount=lnObjectCount+1
				DIMENSION laObjects[lnObjectCount],laObjects2[lnObjectCount]
				DIMENSION laObjectRecNo[lnObjectCount]
				laObjects[lnObjectCount]=lcItem
				laObjects2[lnObjectCount]="  ("+thisform.ProperBaseClass(BaseClass)+")"
				laObjectRecNo[lnObjectCount]=RECNO()
			ENDFOR
		ELSE
			lnChildCount=VAL(Reserved2)-1
			FOR lnCount = 1 TO lnChildCount
				SKIP
				IF NOT llShowProtected AND NOT EMPTY(Protected) OR ;
						NOT LOWER(ALLTRIM(Parent))==lcObjName
					LOOP
				ENDIF
				lcItem=LOWER(ALLTRIM(ObjName))				
				lcItem=IIF(EMPTY(Protected),lcSeparator,lcProtectedSeparator)+lcItem
				lnObjectCount=lnObjectCount+1
				DIMENSION laObjects[lnObjectCount],laObjects2[lnObjectCount]
				DIMENSION laObjectRecNo[lnObjectCount]
				laObjects[lnObjectCount]=lcItem
				laObjects2[lnObjectCount]="  ("+thisform.ProperBaseClass(BaseClass)+")"+ ;
						IIF(EMPTY(Reserved8),"","  (NOINIT)")
				laObjectRecNo[lnObjectCount]=RECNO()
			ENDFOR
		ENDIF
		thisform.RefreshRecNo
		SELECT (thisform.cAlias)
		_mline=0
		FOR lnCount = 1 TO MEMLINE(Protected)
			lcItem=LOWER(ALLTRIM(MLINE(Protected,1,_mline)))
			IF EMPTY(lcItem)
				LOOP
			ENDIF
			IF RIGHT(lcItem,1)=="^"
				lcItem=ALLTRIM(LEFT(lcItem,LEN(lcItem)-1))
				lnHiddenCount=lnHiddenCount+1
				DIMENSION laHidden[lnHiddenCount]
				laHidden[lnHiddenCount]=lcItem+" "
			ELSE
				lnProtectedCount=lnProtectedCount+1
				DIMENSION laProtected[lnProtectedCount]
				laProtected[lnProtectedCount]=lcItem+" "
			ENDIF
		ENDFOR
		_mline=0
		
		FOR lnCount = 1 TO MEMLINE(Reserved3)
			lcItem=LOWER(ALLTRIM(MLINE(Reserved3,1,_mline)))
			lnAtPos=AT(" ",lcItem)
			IF lnAtPos>0
				lcItem=ALLTRIM(LEFT(lcItem,lnAtPos-1))
			ENDIF
			IF EMPTY(lcItem)
				LOOP
			ENDIF
			llMethod=(LEFT(lcItem,1)=="*")
			IF LEFT(lcItem,1)=="^"
				lcItem=STRTRAN(STRTRAN(STRTRAN(ALLTRIM(SUBSTR(lcItem,2)), ;
						"(","["),")","]"),",0]","]")
			ENDIF
			lcItem=STRTRAN(STRTRAN(LOWER(ALLTRIM(IIF(llMethod,SUBSTR(lcItem,2),lcItem))),"(","["),")","]")
			lcItem2=lcItem
			lnAtPos=AT("[",lcItem2)
			IF lnAtPos>0
				lcItem2=ALLTRIM(LEFT(lcItem2,lnAtPos-1))
			ENDIF
			llProtectedMatch=(ASCAN(laProtected,lcItem2+" ")>0)
			IF NOT llShowProtected AND llProtectedMatch
				LOOP
			ENDIF
			llHiddenMatch=(ASCAN(laHidden,lcItem2+" ")>0)
			IF NOT llShowHidden AND llHiddenMatch
				LOOP
			ENDIF
			lcEmptySeparator=""
			IF llMethod AND ATC(CR+"PROCEDURE "+lcItem+CR,CR+Methods+CR)=0 AND ;
			 ATC(LF+"PROCEDURE "+lcItem+CR,LF+Methods+CR)=0
				lcEmptySeparator="~"
				IF NOT llShowEmpty
					LOOP
				ENDIF
			ENDIF
			DO CASE
				CASE llShowProtected AND lnProtectedCount>0 AND llProtectedMatch
					lcItem=lcProtectedSeparator+lcItem
				CASE llShowHidden AND lnHiddenCount>0 AND llHiddenMatch
					lcItem=lcHiddenSeparator+lcItem
				OTHERWISE
					lcItem=lcSeparator+lcItem
			ENDCASE
			IF NOT EMPTY(lcEmptySeparator)
				lcItem=STUFF(lcItem,7,1,lcEmptySeparator)
			ENDIF
			IF llMethod
				lnMethodCount=lnMethodCount+1
				DIMENSION laMethods[lnMethodCount]
				laMethods[lnMethodCount]=lcItem
			ELSE
				lnPropertyCount=lnPropertyCount+1
				DIMENSION laProperties[lnPropertyCount]
				laProperties[lnPropertyCount]=lcItem
			ENDIF
		ENDFOR
		lnInstanceCount=AINSTANCE(laInstances,thisform.cClass)
		IF lnMethodCount>0
			=ASORT(laMethods)
		ENDIF
		IF lnPropertyCount>0
			=ASORT(laProperties)
		ENDIF
		this.Clear
		lcMemberChar="o"
		FOR lnCount = 1 TO lnObjectCount
			lcItem=laObjects[lnCount]
			this.AddItem(lcMemberChar+lcItem+laObjects2[lnCount])
			lnAtPos=AT(" ",lcItem)
			IF lnAtPos>0
				lcItem=ALLTRIM(SUBSTR(lcItem,lnAtPos+1))
			ENDIF
			WITH thisform
				.nMemberCount=.nMemberCount+1
				DIMENSION .aMemberList[.nMemberCount,3]
				.aMemberList[.nMemberCount,1]=ALLTRIM(CHRTRAN(lcItem,"*~^",""))
				.aMemberList[.nMemberCount,2]=lcMemberChar
				.aMemberList[.nMemberCount,3]=laObjectRecNo[lnCount]
			ENDWITH
		ENDFOR
		lcMemberChar="m"
		FOR lnCount = 1 TO lnMethodCount
			lcItem=laMethods[lnCount]
			this.AddItem(lcMemberChar+lcItem)
			lnAtPos=AT(" ",lcItem)
			IF lnAtPos>0
				lcItem=ALLTRIM(SUBSTR(lcItem,lnAtPos+1))
			ENDIF
			WITH thisform
				.nMemberCount=.nMemberCount+1
				DIMENSION .aMemberList[.nMemberCount,3]
				.aMemberList[.nMemberCount,1]=ALLTRIM(CHRTRAN(lcItem,"*~^",""))
				.aMemberList[.nMemberCount,2]=lcMemberChar
				.aMemberList[.nMemberCount,3]=""
			ENDWITH
		ENDFOR
		lcMemberChar="p"
		FOR lnCount = 1 TO lnPropertyCount
			lcItem=laProperties[lnCount]
			lcItem2=""
			this.AddItem(lcMemberChar+lcItem)
			lnAtPos=AT("[",lcItem)
			IF lnAtPos>0
				lcItem2=ALLTRIM(SUBSTR(lcItem,lnAtPos))
				lcItem=ALLTRIM(LEFT(lcItem,lnAtPos-1))
			ENDIF
			lnAtPos=AT(" ",lcItem)
			IF lnAtPos>0
				lcItem=ALLTRIM(SUBSTR(lcItem,lnAtPos+1))
			ENDIF
			WITH thisform
				.nMemberCount=.nMemberCount+1
				DIMENSION .aMemberList[.nMemberCount,3]
				.aMemberList[.nMemberCount,1]=ALLTRIM(CHRTRAN(lcItem,"*~^",""))
				.aMemberList[.nMemberCount,2]=lcMemberChar
				.aMemberList[.nMemberCount,3]=lcItem2
			ENDWITH
		ENDFOR
		lcMemberChar="i"
		FOR lnCount = 1 TO lnInstanceCount
			lcItem=laInstances[lnCount]
			this.AddItem(lcMemberChar+lcSeparator+lcItem)
			lnAtPos=AT(" ",lcItem)
			IF lnAtPos>0
				lcItem=ALLTRIM(SUBSTR(lcItem,lnAtPos+1))
			ENDIF
			WITH thisform
				.nMemberCount=.nMemberCount+1
				DIMENSION .aMemberList[.nMemberCount,3]
				.aMemberList[.nMemberCount,1]=ALLTRIM(CHRTRAN(lcItem,"*~^",""))
				.aMemberList[.nMemberCount,2]=lcMemberChar
				.aMemberList[.nMemberCount,3]=""
			ENDWITH
		ENDFOR
		thisform.RefreshRecNo
		SELECT 0
		
	ENDPROC

	PROCEDURE RightClick
		thisform.DisplayMenu(2)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS opencatalogdialog AS browserdialog OF "browser.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCatalog" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboFiles" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAddMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOpen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHeader1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHeader2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgOpenInternetAddress" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getfile
		*m: initfilelist
		*m: setfilename
		*p: cfilename
		*p: ndefaultlistindex
		*p: nfilecount
		*a: afiles[1,2]
	*</DefinedPropArrayMethod>

	Caption = "Open"
	cfilename = 
	DoCreate = .T.
	Height = 136
	HelpContextID = 1895825657
	Name = "opencatalogdialog"
	ndefaultlistindex = 1
	nfilecount = 0
	Width = 326

	ADD OBJECT 'cboFiles' AS combobox WITH ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 24, ;
		Left = 58, ;
		Name = "cboFiles", ;
		RowSourceType = 1, ;
		Style = 2, ;
		TabIndex = 4, ;
		Top = 54, ;
		Width = 260, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'chkAddMode' AS checkbox WITH ;
		AutoSize = .T., ;
		Caption = "\<Add catalog to current default view", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 58, ;
		Name = "chkAddMode", ;
		TabIndex = 5, ;
		Top = 84, ;
		Value = .F., ;
		Width = 183, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdBrowse' AS commandbutton WITH ;
		Caption = "\<Browse...", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 243, ;
		Name = "cmdBrowse", ;
		TabIndex = 8, ;
		Top = 105, ;
		Width = 75, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 162, ;
		Name = "cmdCancel", ;
		TabIndex = 7, ;
		Top = 105, ;
		Width = 75, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOpen' AS commandbutton WITH ;
		Caption = "\<Open", ;
		Default = .T., ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 81, ;
		Name = "cmdOpen", ;
		TabIndex = 6, ;
		Top = 105, ;
		Width = 75, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'imgOpenInternetAddress' AS image WITH ;
		BackStyle = 0, ;
		Height = 36, ;
		Left = 8, ;
		Name = "imgOpenInternetAddress", ;
		Picture = catalog.ico, ;
		Stretch = 1, ;
		Top = 12, ;
		Width = 42
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblCatalog' AS label WITH ;
		AutoSize = .T., ;
		Caption = "\<Catalog:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 13, ;
		Name = "lblCatalog", ;
		TabIndex = 3, ;
		Top = 58, ;
		Width = 41, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblHeader1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Select an existing catalog description or file name, and", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 58, ;
		Name = "lblHeader1", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 258
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblHeader2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Component Gallery will open it for you.", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 58, ;
		Name = "lblHeader2", ;
		TabIndex = 2, ;
		Top = 27, ;
		Width = 181
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE getfile
		LOCAL lcFileName
		
		lcFileName=this.oHost.GetFile()
		IF EMPTY(lcFileName) OR NOT FILE(lcFileName)
			RETURN ""
		ENDIF
		this.cboFiles.AddItem(lcFileName)
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS oSource
		
		IF NOT DODEFAULT(oSource)
			RETURN .F.
		ENDIF
		this.InitFileList
		
	ENDPROC

	PROCEDURE initfilelist
		LOCAL lcAlias,lcFileName,lcDesc
		
		DIMENSION this.aFiles[1,2]
		lcAlias=SYS(2015)+"_"+SYS(3)
		IF USED(lcAlias)
			USE IN (lcAlias)
		ENDIF
		SELECT Name,Desc FROM browser ;
				WHERE NOT DELETED() AND NOT Global AND ;
						UPPER(ALLTRIM(Platform))==this.oHost.cPlatform AND ;
						LOWER(RIGHT(Name,4))==".dbf" AND ;
						UPPER(ALLTRIM(Type))=="PREFW" AND ;
						UPPER(ALLTRIM(ID))=="FORMINFO" AND NOT EMPTY(Name) ;
				ORDER BY Updated DESC ;
				INTO CURSOR (lcAlias)
		SCAN REST
			IF ":"$Name AND NOT "\\"$Name
				lcFileName=LOWER(ALLTRIM(Name))
			ELSE
				lcFileName=LOWER(FULLPATH(ALLTRIM(Name)))
			ENDIF
			lcDesc=ALLTRIM(MLINE(Desc,1))
			IF EMPTY(lcDesc)
				lcDesc=lcFileName
			ENDIF
			this.cboFiles.AddItem(lcDesc)
			this.aFiles[this.nFileCount,2]=lcFileName
			IF lcFileName==this.oHost.cCatalog
				this.nDefaultListIndex=this.nFileCount
			ENDIF
		ENDSCAN
		USE
		SELECT 0
		this.cboFiles.ListIndex=this.nDefaultListIndex
		
		
	ENDPROC

	PROCEDURE setfilename
		IF this.cboFiles.ListIndex=0 AND this.nFileCount>0
			this.cboFiles.ListIndex=this.nFileCount
		ENDIF
		this.cFileName=this.aFiles[this.cboFiles.ListIndex,2]
		IF EMPTY(this.cFileName)
			this.cFileName=""
			RETURN .F.
		ENDIF
		IF this.chkAddMode.Value
			this.cFileName="+"+this.cFileName
		ENDIF
		
	ENDPROC

	PROCEDURE Unload
		RETURN this.cFileName
		
	ENDPROC

	PROCEDURE cboFiles.AddItem
		LPARAMETERS cItem,nIndex,nColumn,tcItem2
		LOCAL lcItem,lnCount,lcFileName,lcToolTipText
		
		lcItem=cItem
		IF EMPTY(lcItem)
			NODEFAULT
			RETURN .F.
		ENDIF
		IF LEN(lcItem)>48
			NODEFAULT
			RETURN this.AddItem(ALLTRIM(LEFT(lcItem,45))+"...",this.ListCount+1,1,lcItem)
		ENDIF
		IF NOT EMPTY(tcItem2)
			lcItem=tcItem2
		ENDIF
		lcFileName=LOWER(ALLTRIM(lcItem))
		WITH thisform
			FOR lnCount = 1 TO .nFileCount
				IF .aFiles[lnCount,2]==lcFileName
					NODEFAULT
					this.ListIndex=lnCount
					RETURN
				ENDIF
			ENDFOR
			.nFileCount=.nFileCount+1
			DIMENSION .aFiles[.nFileCount,2]
			.aFiles[.nFileCount,1]=lcItem
			.aFiles[.nFileCount,2]=lcFileName
			this.ListIndex=.nFileCount
			lcToolTipText=lcFileName
			IF LEN(lcToolTipText)>127
				lcToolTipText=ALLTRIM(LEFT(lcToolTipText,124))+"..."
			ENDIF
			this.ToolTipText=lcToolTipText
		ENDWITH
		
	ENDPROC

	PROCEDURE cboFiles.InteractiveChange
		LOCAL lcToolTipText
		
		IF BETWEEN(this.ListIndex,1,thisform.nFileCount)
			lcToolTipText=thisform.aFiles[this.ListIndex,2]
			IF LEN(lcToolTipText)>127
				lcToolTipText=ALLTRIM(LEFT(lcToolTipText,124))+"..."
			ENDIF
			this.ToolTipText=lcToolTipText
		ENDIF
		
	ENDPROC

	PROCEDURE cboFiles.ProgrammaticChange
		this.InteractiveChange
		
	ENDPROC

	PROCEDURE cmdBrowse.Click
		thisform.GetFile
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.Release
		
	ENDPROC

	PROCEDURE cmdOpen.Click
		thisform.SetFileName
		thisform.Release
		
	ENDPROC

ENDDEFINE

DEFINE CLASS outlinelistbox AS listbox 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "browser.h"
	*<DefinedPropArrayMethod>
		*m: picturedblclick
		*p: nxcoord
		*p: nycoord
	*</DefinedPropArrayMethod>

	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 222
	Name = "outlinelistbox"
	nxcoord = -1
	nycoord = -1
	StatusBarText = "Class list"
	TabIndex = 6
	Width = 219
	
	PROCEDURE DblClick
		LOCAL lnMouseTop,lnMouseLeft
		
		lnMouseTop=this.nYCoord-this.Top
		lnMouseLeft=this.nXCoord-this.Left
		IF lnMouseLeft<=14
			RETURN this.PictureDblClick()
		ENDIF
		thisform.ModifyClass
		
	ENDPROC

	PROCEDURE DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		
		RETURN thisform.DragDrop(oSource,nXCoord,nYCoord)
		
	ENDPROC

	PROCEDURE DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		
		RETURN thisform.DragOver(oSource,nXCoord,nYCoord,nState)
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		RETURN thisform.Error(nError,cMethod,nLine,this)
		
	ENDPROC

	PROCEDURE InteractiveChange
		IF thisform.lRelease OR this.ListIndex=0
			RETURN
		ENDIF
		IF (this.ListIndex-1)=thisform.nClassListIndex
			WITH thisform
				IF .nMemberListIndex>0
					.nMemberListIndex=-1
					.lstMembers.ListIndex=-1
					.RefreshCaption
					.edtMemberDesc.Refresh
				ENDIF
				.AutoRefresh
			ENDWITH
		ELSE
			thisform.RefreshMembers
		ENDIF
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		DO CASE
			CASE nKeyCode=13
				NODEFAULT
				RETURN .F.
			CASE nKeyCode=7
				IF NOT thisform.lFileMode
					thisform.RemoveClass(.T.)
				ENDIF
				RETURN
			CASE nKeyCode=32
				this.DblClick
				RETURN
			CASE nKeyCode=93
				IF nShiftAltCtrl=1
					thisform.DisplayMenu(1)
				ENDIF
				NODEFAULT
				RETURN
			CASE nKeyCode=112
				HELP ID (thisform.HelpContextID) NOWAIT
				RETURN
			OTHERWISE
				RETURN thisform.KeyPress(nKeyCode,nShiftAltCtrl)
		ENDCASE
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF thisform.lRelease
			RETURN
		ENDIF
		this.nXCoord=nXCoord
		this.nYCoord=nYCoord
		IF (this.ListIndex-1)=thisform.nClassListIndex
			IF thisform.lstMembers.ListIndex>0
				thisform.lstMembers.ListIndex=-1
				thisform.RefreshCaption
				thisform.RefreshButtons
				thisform.edtMemberDesc.Refresh
			ENDIF
			thisform.AutoRefresh
		ENDIF
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF this.ListIndex=0
			this.ListIndex=thisform.nClassListIndex+1
		ENDIF
		
	ENDPROC

	PROCEDURE picturedblclick
		thisform.SeekParentClass
		
	ENDPROC

	PROCEDURE RightClick
		thisform.DisplayMenu(1)
		
	ENDPROC

	PROCEDURE SetFocus
		IF (this.ListIndex-1)#thisform.nClassListIndex
			thisform.RefreshMembers
		ENDIF
		
	ENDPROC

ENDDEFINE
